{"componentChunkName":"component---src-templates-blog-post-js","path":"/Data Structure/220929/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"비원시 자료구조이며 데이터를 선형적으로 구성하는 스택(Stack), 큐(Queue)를 javascript pop, push, shift 메서드로 구현해보자. 비원시 자료구조, 선형적 자료구조 스택(Stack) 과 큐(Queue) 는 비원시 자료구조(Non-Primitive Data Structure) 이며, 선형적 자료구조(Linear Structure)…","html":"<blockquote>\n<p>비원시 자료구조이며 데이터를 선형적으로 구성하는 스택(Stack), 큐(Queue)를 javascript pop, push, shift 메서드로 구현해보자.</p>\n</blockquote>\n<h2>비원시 자료구조, 선형적 자료구조</h2>\n<p><strong>스택(Stack)</strong> 과 <strong>큐(Queue)</strong> 는 <strong>비원시 자료구조(Non-Primitive Data Structure)</strong> 이며, <strong>선형적 자료구조(Linear Structure)</strong> 이다. 먼저 이것이 무엇일까?</p>\n<p>원시 자료구조가 정수형(Integer), 실수형(Float), 문자형(Character)과 같은 자료 구성의 기본 단위라면, 비원시 자료구조는 Stack, Queue, Linked List처럼 <strong>한 번에 여러 값을 가지며 고정되지 않은 동적 공간을 사용하는 데이터 구조 유형</strong>이다. 컴퓨터 과학에서는 자료 연산에 구체적인 방법을 명시하지 않는다는 부분에서 <strong>추상 자료형(Abstact Data Type)</strong> 이라고도 한다.</p>\n<p>또한 비원시 자료구조는 선형 구조와 비선형 구조로 분류된다.</p>\n<ul>\n<li>\n<p><strong>선형 구조(linear)</strong> : 데이터 구조의 순차 유형으로, 1:1의 관계를 가짐.</p>\n<ul>\n<li>ex ) Stack, Queue, Linked List, Deque</li>\n</ul>\n</li>\n<li>\n<p><strong>비선형 구조(Nonlinear)</strong> : 무작위 자료구조 형태이며, 데이터가 1:n 또는 n:n 관계를 가짐.</p>\n<ul>\n<li>ex ) Tree, Graph</li>\n</ul>\n</li>\n</ul>\n<p>이 중에서 <strong>Stack</strong>과 <strong>Queue</strong>를 javascript로 간단하게 구현해 보았다.</p>\n<h2>Stack</h2>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/220929/stack1.png\" alt=\"stack1\"></p>\n<p>책을 쌓는 것처럼 차곡차곡 쌓아 올린 형태의 자료구조를 <strong>Stack</strong>이라고 한다.</p>\n<p>한 쪽 끝에서만 자료를 넣고 뺄 수 있으므로 <strong>Last In First Out(LIFO)</strong> 형식이라고 부른다.\n따라서 마지막으로 들어온 값, 나중에 넣은 값이 먼저 나오게 된다.</p>\n<p>Stack은 <code>push()</code>와 <code>pop()</code>을 사용하여 javascript로 쉽게 구현할 수 있는데,</p>\n<pre><code class=\"language-javascript\">// stack\nconst stack = []\n\nfunction addStack(item) {\n  stack.push(item)\n}\n\nfunction delStack() {\n  stack.pop()\n}\n\naddStack(1)\naddStack(2)\naddStack(3)\naddStack(4)\n\ndelStack()\n\nconsole.log(`stack = ${stack}`)\n</code></pre>\n<p>javascript의 <code>pop()</code> 함수는 배열의 가장 맨 끝 값을 제거해 준다.<br>\naddStack으로 값을 추가, delStack은 가장 마지막에 push되었던 값 4를 제거하며 최종적으로 1,2,3이 남아있는 것을 볼 수 있다.</p>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/220929/stack2.png\" alt=\"stack2\"></p>\n<p>Stack의 LIFO 원리는 이전의 작업 내용을 저장해 둘 필요한 경우에 활용 될 수 있다.</p>\n<ul>\n<li><strong>웹 브라우저 방문 기록</strong> - 가장 나중에 열린 페이지부터 방문 리스트에 표시</li>\n<li><strong>역순 문자열 만들기</strong> - 가장 나중에 입력된 문자부터 출력</li>\n<li><strong>실행 취소 (undo)</strong> - 가장 나중에 실행된 것부터 취소</li>\n<li><strong>재귀 알고리즘</strong> - stack에 담아 두었던 재귀 함수를 backtrack 시 임시 데이터를 빼주는 형식</li>\n<li><strong>후위 표기법 계산</strong> - postfix notation</li>\n<li><strong>수식의 괄호 검사</strong> - 연산자 우선순위 표현을 위한 괄호 검사</li>\n</ul>\n<h2>Queue</h2>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/220929/queue1.png\" alt=\"queue1\"></p>\n<p><strong>Queue</strong>는 한쪽으로 데이터를 넣고 다른 쪽으로 데이터를 가져오는 구조이다.</p>\n<p>맨 처음 입력된 데이터가 먼저 나오게 된다. <strong>First In First Out(FIFO), Last In Last Out(LILO)</strong> 형식으로 불린다.</p>\n<pre><code class=\"language-javascript\">// queue\nconst queue = []\n\nfunction addQueue(item) {\n  queue.push(item)\n}\n\nfunction delQueue() {\n  queue.shift()\n}\n\naddQueue(1)\naddQueue(2)\naddQueue(3)\naddQueue(4)\n\ndelQueue()\n\nconsole.log(`queue = ${queue}`)\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/220929/queue2.png\" alt=\"queue2\"></p>\n<p>javascript의 <code>shift()</code> 함수는 배열의 가장 맨 앞 값을 제거해 준다. 결과는 2, 3, 4만 남게 된다.</p>\n<p>실제 Queue의 활용 예시는 다음과 같다.</p>\n<ul>\n<li><strong>CPU, 디스크 스케줄링</strong></li>\n<li><strong>너비 우선 탐색 (BFS, Breadth-First Search)</strong> - 가까운 곳을 먼저, 먼 곳을 나중에 방문하는 순회 방식</li>\n<li><strong>프로세스 관리</strong></li>\n<li><strong>비동기 전송</strong> - 자료 일시 저장 시</li>\n<li><strong>캐시 (Cache)</strong></li>\n</ul>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://www.javatpoint.com/primitive-vs-non-primitive-data-structure\" target=\"_blank\" rel=\"noopener noreferrer\">Primitive vs non-primitive data structure | What's the difference? - javatpoint</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Abstract_data_type\" target=\"_blank\" rel=\"noopener noreferrer\">Abstract data type - Wikipedia</a></p>\n<p><a href=\"https://www.booksr.co.kr/product/9788970509716/\" target=\"_blank\" rel=\"noopener noreferrer\">자료구조 (개정3판) | 생능출판사</a></p>\n<p><a href=\"https://yoongrammer.tistory.com/45\" target=\"_blank\" rel=\"noopener noreferrer\">[자료구조] 스택 (Stack)</a></p>\n<p><a href=\"https://helloworldjavascript.net/pages/282-data-structures.html\" target=\"_blank\" rel=\"noopener noreferrer\">큐, 스택, 트리 | JavaScript로 만나는 세상</a></p>","tableOfContents":"<ul>\n<li><a href=\"/Data%20Structure/220929/#%EB%B9%84%EC%9B%90%EC%8B%9C-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%84%A0%ED%98%95%EC%A0%81-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\">비원시 자료구조, 선형적 자료구조</a></li>\n<li><a href=\"/Data%20Structure/220929/#stack\">Stack</a></li>\n<li><a href=\"/Data%20Structure/220929/#queue\">Queue</a></li>\n<li><a href=\"/Data%20Structure/220929/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 09월 29일","title":"Stack, Queue","tags":["Data structure","Javascript","Stack","Queue"]}}},"pageContext":{"slug":"/Data Structure/220929/","previous":{"fields":{"slug":"/Swift/220925/"},"frontmatter":{"title":"딕셔너리(Dictionary)"}},"next":{"fields":{"slug":"/Computer Science/221004/"},"frontmatter":{"title":"HTTP 헤더 분석"}}}},"staticQueryHashes":["1081905842","3911196313"]}
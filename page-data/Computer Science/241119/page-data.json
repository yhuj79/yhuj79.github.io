{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/241119/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"소프트웨어 개발에서 다양한 아키텍처 패턴은 코드의 구조를 체계화하고 유지보수성을 높이는 데 필수적인 역할을 한다. 그중에서도 MVC(Model-View-Controller), MVP(Model-View-Presenter), MVVM(Model-View-ViewModel)은 소프트웨어 설계에서 가장 널리 사용되는 패턴으로, 관심사를 분리하여 코드를 효율적으…","html":"<blockquote>\n<p>소프트웨어 개발에서 다양한 아키텍처 패턴은 코드의 구조를 체계화하고 유지보수성을 높이는 데 필수적인 역할을 한다. 그중에서도 <strong>MVC(Model-View-Controller)</strong>, <strong>MVP(Model-View-Presenter)</strong>, <strong>MVVM(Model-View-ViewModel)</strong>은 소프트웨어 설계에서 가장 널리 사용되는 패턴으로, 관심사를 분리하여 코드를 효율적으로 관리할 수 있게 한다.</p>\n</blockquote>\n<h2 id=\"mvc-model-view-controller\" style=\"position:relative;\"><a href=\"#mvc-model-view-controller\" aria-label=\"mvc model view controller permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC (Model-View-Controller)</h2>\n<p>MVC는 소프트웨어의 <strong>데이터(Model)</strong>와 이를 표현하는 <strong>화면(View)</strong>, 그리고 사용자로부터의 입력을 처리하여 이 둘을 연결하는 <strong>컨트롤러(Controller)</strong>로 나누는 패턴이다. 이 구조는 애플리케이션의 <strong>비즈니스 로직</strong>과 <strong>UI 요소</strong>를 분리하여 개발 및 유지보수를 용이하게 한다.</p>\n<ul>\n<li><strong>Model</strong>:<br>\n애플리케이션의 데이터와 상태를 관리한다. 데이터베이스, API, 비즈니스 로직 등을 포함하며, 데이터를 가져오고 저장하는 역할을 한다. 또한 데이터의 상태가 변경되면 관련된 View와 Controller에 변경 사항을 알린다.</li>\n<li><strong>View</strong>:<br>\n사용자가 보는 화면과 사용자 인터페이스(UI)를 정의한다. Model에서 전달받은 데이터를 렌더링하며, 사용자와의 상호작용(클릭, 입력 등)을 수신한다. 그러나 View는 비즈니스 로직을 포함하지 않는다.</li>\n<li><strong>Controller</strong>:<br>\n사용자 입력을 처리하고 Model과 View를 연결하는 역할을 한다. 입력을 받아 Model에 적절한 명령을 전달하며, Model에서 데이터를 가져와 View로 전달한다. Controller는 애플리케이션의 흐름을 제어하는 중추적인 역할을 한다.</li>\n</ul>\n<img alt=\"mvc\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/241119/mvc.png\">\n<ol>\n<li>사용자가 입력을 하면, 입력이 Controller에 전달된다.</li>\n<li>Controller는 입력을 처리하고 필요한 경우 Model을 업데이트한다.</li>\n<li>Model은 상태를 변경한 뒤 View에 알린다.</li>\n<li>View는 Model로부터 새로운 데이터를 받아 화면에 반영한다.</li>\n</ol>\n<p>MVC는 데이터와 UI가 밀접하게 연관되지 않고 명확히 분리되는 것을 볼 수 있다.</p>\n<h2 id=\"mvp-model-view-presenter\" style=\"position:relative;\"><a href=\"#mvp-model-view-presenter\" aria-label=\"mvp model view presenter permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVP (Model-View-Presenter)</h2>\n<p>MVP는 MVC 패턴에서 발전된 형태로, <strong>Presenter</strong>가 <strong>Controller</strong>를 대신하여 <strong>View와 Model 간의 의존성을 완전히 제거</strong>하는 데 초점을 둔 패턴이다. 이로 인해 UI와 로직이 더 분리되어 테스트 가능성과 코드의 명확성이 향상된다.</p>\n<ul>\n<li><strong>Model</strong>:<br>\nMVC의 Model과 동일하다. 데이터를 가져오고 비즈니스 로직을 수행하는 역할을 한다.</li>\n<li><strong>View</strong>:<br>\nUI를 담당하며, 사용자의 입력을 처리하지만 비즈니스 로직은 포함하지 않는다. View는 오직 Presenter를 통해 데이터를 요청하고, 결과를 화면에 표시한다.</li>\n<li><strong>Presenter</strong>:<br>\nView와 Model 사이에서 중재자 역할을 한다. 사용자의 입력 이벤트를 수신하여 필요한 비즈니스 로직을 처리하고, Model에서 데이터를 가져와 View로 전달한다. View에 대한 직접적인 참조를 가지며, UI 갱신을 담당한다.</li>\n</ul>\n<img alt=\"mvp\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/241119/mvp.png\">\n<ol>\n<li>사용자가 입력을 하면 View가 해당 이벤트를 Presenter로 전달한다.</li>\n<li>Presenter는 입력을 처리하고 필요한 경우 Model에 명령을 내린다.</li>\n<li>Model은 Presenter에 데이터를 반환한다.</li>\n<li>Presenter는 데이터를 View로 전달하여 화면을 갱신한다.</li>\n</ol>\n<p>Presenter는 View와 Model 간의 의존성을 제거하고, UI 로직과 비즈니스 로직을 명확히 분리함으로써 테스트 가능성을 높이고 유지보수를 쉽게 한다.</p>\n<h2 id=\"mvvm-model-view-viewmodel\" style=\"position:relative;\"><a href=\"#mvvm-model-view-viewmodel\" aria-label=\"mvvm model view viewmodel permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVVM (Model-View-ViewModel)</h2>\n<p>MVVM은 UI와 비즈니스 로직을 완전히 분리하기 위해 설계된 패턴으로, 특히 <strong>데이터 바인딩(Data Binding)</strong>을 통해 View와 ViewModel 간의 상호작용을 자동화하는 데 중점을 둔다. 이 패턴은 <strong>Command 패턴</strong>과 <strong>Data Binding 기술</strong>을 활용하여 UI 로직을 단순화하고 개발 효율성을 극대화한다.</p>\n<ul>\n<li><strong>Model</strong>:<br>\n애플리케이션의 데이터와 비즈니스 로직을 정의한다. 데이터베이스나 API와 같은 데이터 소스와 상호작용하며, 데이터를 관리한다.</li>\n<li><strong>View</strong>:<br>\n사용자 인터페이스를 정의하며, 데이터를 표현하고 사용자 입력을 수신한다. View는 비즈니스 로직 없이 ViewModel에 의해 데이터를 갱신한다.</li>\n<li><strong>ViewModel</strong>:<br>\nView와 Model 사이의 데이터와 상태를 관리한다. ViewModel은 View와 Model 간의 중재자 역할을 하지만, View에 대한 직접적인 참조를 가지지 않는다. 대신, 데이터 바인딩을 통해 자동으로 View와 데이터를 동기화한다.</li>\n</ul>\n<img alt=\"mvvm\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/241119/mvvm.png\">\n<ol>\n<li>View는 ViewModel과 바인딩을 설정한다.</li>\n<li>사용자의 입력 이벤트는 ViewModel로 전달된다.</li>\n<li>ViewModel은 Model에 명령을 내리고 데이터를 갱신한다.</li>\n<li>Model에서 변경된 데이터는 ViewModel을 통해 자동으로 View에 반영된다.</li>\n</ol>\n<p>MVVM은 UI와 로직 간의 분리를 극대화하여 코드의 재사용성과 테스트 가능성을 높이고, 데이터 바인딩을 통해 개발 생산성을 향상시킨다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>세 가지 패턴은 모두 관심사를 분리하는 데 중점을 두지만, 구현 방식과 역할 분담에는 차이가 있다.</p>\n<ul>\n<li><strong>MVC</strong>는 단순하고 명확한 구조로, View와 Model이 서로 직접적인 의존성을 가질 수 있다.</li>\n<li><strong>MVP</strong>는 Presenter를 통해 View와 Model 간의 의존성을 제거하며, View와 Presenter가 1:1 관계를 갖는다.</li>\n<li><strong>MVVM</strong>은 ViewModel을 통해 데이터와 UI를 자동으로 동기화하며, View와 Model 간의 의존성을 최소화한다.</li>\n</ul>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://swimjiy.github.io/2019-05-28-web-mvc-mvp-mvvm\" target=\"_blank\" rel=\"noopener noreferrer\">디자인 패턴 톺아보기 - MVC, MVP, MVVM</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Glossary/MVC\" target=\"_blank\" rel=\"noopener noreferrer\">MVC - MDN Web Docs 용어 사전: 웹 용어 정의 | MDN</a></p>\n<p><a href=\"https://velog.io/@kyeun95/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-MVP-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\" target=\"_blank\" rel=\"noopener noreferrer\">[디자인 패턴] MVP 패턴이란?</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\" target=\"_blank\" rel=\"noopener noreferrer\">Model–view–viewmodel - Wikipedia</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","tableOfContents":"<ul>\n<li><a href=\"/Computer%20Science/241119/#mvc-model-view-controller\">MVC (Model-View-Controller)</a></li>\n<li><a href=\"/Computer%20Science/241119/#mvp-model-view-presenter\">MVP (Model-View-Presenter)</a></li>\n<li><a href=\"/Computer%20Science/241119/#mvvm-model-view-viewmodel\">MVVM (Model-View-ViewModel)</a></li>\n<li><a href=\"/Computer%20Science/241119/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/Computer%20Science/241119/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2024년 11월 19일","title":"MVC, MVP, MVVM","tags":["Computer Science","Design Pattern"]}}},"pageContext":{"slug":"/Computer Science/241119/","previous":{"fields":{"slug":"/Computer Science/241021/"},"frontmatter":{"title":"스크립트 언어의 진화와 미래 기술 동향"}},"next":{"fields":{"slug":"/Javascript/241222/"},"frontmatter":{"title":"Javascript V8 작동 원리"}}}},"staticQueryHashes":["1081905842","3911196313"]}
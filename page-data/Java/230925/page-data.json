{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/230925/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"자바(Java)는 썬 마이크로시스템즈의 제임스 고슬링(James Gosling)과 다른 연구원들이 개발한 객체 지향적 프로그래밍 언어이다. 1991년 그린 프로젝트(Green Project)라는 이름으로 시작해 1995년에 발표했다. 처음에는 가전제품 내에 탑재해 동작하는 프로그램을 위해 개발되었지만 현재 웹 애플리케이션 분야에 가장 많이 사용하는 언어 …","html":"<blockquote>\n<p>자바(Java)는 썬 마이크로시스템즈의 제임스 고슬링(James Gosling)과 다른 연구원들이 개발한 객체 지향적 프로그래밍 언어이다. 1991년 그린 프로젝트(Green Project)라는 이름으로 시작해 1995년에 발표했다. 처음에는 가전제품 내에 탑재해 동작하는 프로그램을 위해 개발되었지만 현재 웹 애플리케이션 분야에 가장 많이 사용하는 언어 중 하나이고, 안드로이드를 비롯한 모바일 기기용 소프트웨어 개발에도 널리 사용되고 있다.</p>\n</blockquote>\n<h2>개요</h2>\n<h4>Java 의 역사</h4>\n<ul>\n<li>1991년 선마이크로시스템스(오라클에 인수됨)의 제임스 고슬링이 C 언어를 모델로 연구 시작</li>\n<li>1995년 JDK(Java Development Kit) 1.0 발표</li>\n<li>1997년 JDK 1.1이 발표되면서 완전한 프로그래밍 언어의 모습을 갖춤</li>\n</ul>\n<h4>Java의 특징</h4>\n<ul>\n<li>구문이 간결함</li>\n<li>명료한 객체지향 언어</li>\n<li>이식성이 높고, 기계에 중립적</li>\n<li>분산처리지원</li>\n<li>멀티스레드(Multi-thread) 언어</li>\n</ul>\n<h2>기본 문법</h2>\n<h4>변수와 데이터 형식</h4>\n<pre><code class=\"language-java\">public class example {\n    public static void main(String args[]) {\n        int var1 = 10;\n        float var2 = 10.1f;\n        double var3 = 10.2;\n        char var4 = '안';\n        String var5 = \"안드로이드\";\n        System.out.println(var1);\n        System.out.println(var2);\n        System.out.println(var3);\n        System.out.println(var4);\n        System.out.println(var5);\n    }\n}\n</code></pre>\n<p><strong>char</strong> : 2byte를 사용하며 한글 또는 영문 1개만 입력</p>\n<p><strong>String</strong> : 여러 글자의 문자열을 입력</p>\n<p><strong>byte</strong> : 1byte를 사용하며 -128~+127 까지 입력</p>\n<p><strong>short</strong> : 2byte를 사용하며 -32768~+32767까지 입력</p>\n<p><strong>int</strong> : 4bvte를 사용하며 약 21억~+21억까지 입력</p>\n<p><strong>long</strong> : 8byte를 사용하며 상당히 큰 정수까지 입력 가능</p>\n<p><strong>float</strong> : 4bvte를 사용하며 실수를 입력</p>\n<p><strong>double</strong> : 8byte를 사용하며 실수를 입력. float보다 정밀도가 높음</p>\n<p><strong>boolean</strong> : true 또는 false를 입력</p>\n<h4>조건문: if, switch()~case</h4>\n<pre><code class=\"language-java\">public class example {\n    public static void main(String[] args) {\n\n        int count = 85;\n\n        if (count >= 90) {\n            System.out.println(\"if statement: pass (A)\");\n        } else if (count >= 60) {\n            System.out.println(\"if statement: pass\");\n        } else {\n            System.out.println(\"if statement: fail\");\n        }\n\n        int points = (count / 10) * 10;\n\n        switch (points) {\n            case 100, 90 -> System.out.println(\"switch statement: pass (A)\");\n            case 80, 70, 60 -> System.out.println(\"switch statement: pass\");\n            default -> System.out.println(\"switch statement: pass\");\n        }\n    }\n}\n</code></pre>\n<h4>메소드와 전역변수, 지역변수</h4>\n<ul>\n<li>전역변수(global variable) : 모든 메소드에서 사용 가능함</li>\n<li>지역변수(local variable) : 메소드 내부에서만 사용 가능함</li>\n</ul>\n<pre><code class=\"language-java\">public class example {\n    static int var = 100;\n    public static void main(String[] args) {\n        int var = 0;\n        System.out.println(var);\n\n        int sum = addFunction(10, 20);\n        System.out.println(sum);\n    }\n\n    static int addFunction(int num1, int num2) {\n        int hap;\n        hap = num1 + num2 + var;\n        return hap;\n    }\n}\n</code></pre>\n<h4>예외 처리: try~catch</h4>\n<ul>\n<li>프로그램 실행 중에 발생하는 오류를 Java는 try~catch문을 통해 처리</li>\n</ul>\n<pre><code class=\"language-java\">public class example {\n    static int var = 100;\n\n    public static void main(String[] args) {\n        int num1 = 100, num2 = 0;\n\n        try {\n            System.out.println(num1 / num2);\n        } catch (java.lang.ArithmeticException e) {\n            System.out.println(\"Divide by Zero\");\n        }\n    }\n}\n</code></pre>\n<h2>클래스와 인스턴스</h2>\n<h4>클래스 정의와 인스턴스 생성</h4>\n<ul>\n<li>객체지향 프로그래밍(Object-Oriented Programming, OOP)</li>\n<li>Java, C++, C# 등에서 사 용되는 프로그래밍 기술</li>\n<li>클래스(class) = 변수(필드) + 메소드</li>\n</ul>\n<pre><code class=\"language-java\">class Car {\n    String color;\n    int speed = 0;\n\n    int getSpeed() {\n        return speed;\n    }\n\n    void upSpeed(int value) {\n        if (speed + value >= 200)\n            speed = 200;\n        else\n            speed = speed + value;\n    }\n\n    void downSpeed(int value) {\n        if (speed - value &#x3C;= 0)\n            speed = 0;\n        else\n            speed = speed - value;\n    }\n\n    String getColor() {\n        return color;\n    }\n}\n\npublic class example {\n    public static void main(String[] args) {\n\n        Car myCar1 = new Car();\n        myCar1.color = \"red\";\n        myCar1.speed = 0;\n\n        Car myCar2 = new Car();\n        myCar2.color = \"blue\";\n        myCar2.speed = 0;\n\n        Car myCar3 = new Car();\n        myCar3.color = \"green\";\n        myCar3.speed = 0;\n\n        myCar1.upSpeed(50);\n        System.out.println(\"The color of myCar1 is \" + myCar1.getColor() + \", velocity is \" + myCar1.getSpeed() + \" km.\");\n\n        myCar2.downSpeed(20);\n        System.out.println(\"The color of myCar2 is \" + myCar2.getColor() + \", velocity is \" + myCar2.getSpeed() + \" km.\");\n\n        myCar3.upSpeed(250);\n        System.out.println(\"The color of myCar3 is \" + myCar3.getColor() + \", velocity is \" + myCar3.getSpeed() + \" km.\");s\n\n        myCar3.downSpeed(20);\n        System.out.println(\"The color of myCar3 is \" + myCar3.getColor() + \", velocity is \" + myCar3.getSpeed() + \" km.\");\n    }\n}\n</code></pre>\n<h4>생성자로 인스턴스 만들기</h4>\n<pre><code class=\"language-java\">public class Car {\n    String color;\n    int speed\n    Car(String color, int speed) {\n        this.color = color;\n        this.speed = speed;\n    }\n\n    ...\n\npublic class example {\n    public static void main(String[] args) {\n        Car myCar1 = new Car(\"red\", 0);\n        Car myCar2 = new Car(\"blue\", 0);\n        Car myCar3 = new Car(\"green\", 0);\n\n    ...\n</code></pre>\n<h4>메소드 오버로딩</h4>\n<ul>\n<li>클래스 내에서 메소드의 이름이 같아도 파라미터의 개수나 데이터형만 다르면 여러 개 선언 가능</li>\n</ul>\n<pre><code class=\"language-java\">public class Car {\n    String color;\n    int speed;\n\n    Car(String color, int speed) {\n        this.color = color;\n        this.speed = speed;\n    }\n\n    Car(int speed) {\n        this.speed = speed;\n    }\n\n    Car() {\n    }\n\n    void upSpeed(double value) {\n        if (speed >= 200)\n            speed = 200;\n        else\n            speed = speed + (int) value;\n    }\n\n    int getSpeed() {\n        return speed;\n    }\n\n    void upSpeed(int value) {\n        if (speed >= 200)\n            speed = 200;\n        else\n            speed = speed + value;\n    }\n\n    void downSpeed(int value) {\n        if (speed &#x3C;= 0)\n            speed = 0;\n        else\n            speed = speed - value;\n    }\n\n    String getColor() {\n        return color;\n    }\n}\n</code></pre>\n<h4>정적 필드, 정적 메소드, 상수 필드</h4>\n<ul>\n<li>정적 필드(static field) : 클래스 자체에서 사용되는 변수</li>\n<li>정적 메소드(static method) : 메소드 앞에 static 붙여 사용. 인스턴스 없이 ‘클래스명.메소드명()’으로 호출해서 사용</li>\n<li>상수 필드 : 정적 필드에 초기값을 입력하고 final을 앞에 붙임</li>\n</ul>\n<pre><code class=\"language-java\">public class Car {\n    String color;\n    int speed;\n    static int carCount = 0;\n    final static int MAXSPEED = 200;\n    final static int MINSPEED = 0;\n\n    static int currentCarCount() {\n        return carCount;\n    }\n\n    Car(String color, int speed) {\n        this.color = color;\n        this.speed = speed; carCount++;\n    }\n    Car(int speed) {\n        this.speed = speed;\n    }\n    Car() {\n    }\n\n    void upSpeed(double value) {\n        if (speed >= 200)\n            speed = 200;\n        else\n            speed = speed + (int) value;\n    }\n    int getSpeed() {\n        return speed;\n    }\n    void upSpeed(int value) {\n        if (speed >= 200)\n            speed = 200;\n        else\n            speed = speed + value;\n    }\n    void downSpeed(int value) {\n        if (speed &#x3C;= 0)\n            speed = 0;\n        else\n            speed = speed - value;\n    }\n    String getColor() {\n        return color;\n    }\n}\n</code></pre>\n<p>정적 구성 요소 추가</p>\n<pre><code class=\"language-java\">public class example {\n    public static void main(String[] args) {\n        Car myCar1 = new Car(\"red\", 0);\n        Car myCar2 = new Car(\"blue\", 0);\n        Car myCar3 = new Car(\"green\", 0);\n\n        System.out.println(\"The number of car produced (static field) ==> \" + Car.carCount);\n        System.out.println(\"The number of car produced (static method) ==> \" + Car.currentCarCount());\n        System.out.println(\"The upper limit of velocity ==> \" + Car.MAXSPEED);\n        System.out.println(\"The value of PI ==> \" + Math.PI);\n        System.out.println(\"3 to the 5th power ==> \" + Math.pow(3, 5));\n    }\n}\n</code></pre>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\" target=\"_blank\" rel=\"noopener noreferrer\">Java (programming language)</a></p>\n<p><a href=\"https://www.hanbit.co.kr/store/books/look.php?p_code=B7099909363\" target=\"_blank\" rel=\"noopener noreferrer\">IT CookBook, Android Studio를 활용한 안드로이드 프로그래밍(8판)</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Java/230925/#%EA%B0%9C%EC%9A%94\">개요</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Java/230925/#java-%EC%9D%98-%EC%97%AD%EC%82%AC\">Java 의 역사</a></li>\n<li><a href=\"/Java/230925/#java%EC%9D%98-%ED%8A%B9%EC%A7%95\">Java의 특징</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/230925/#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\">기본 문법</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Java/230925/#%EB%B3%80%EC%88%98%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%95%EC%8B%9D\">변수와 데이터 형식</a></li>\n<li><a href=\"/Java/230925/#%EC%A1%B0%EA%B1%B4%EB%AC%B8-if-switchcase\">조건문: if, switch()~case</a></li>\n<li><a href=\"/Java/230925/#%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98\">메소드와 전역변수, 지역변수</a></li>\n<li><a href=\"/Java/230925/#%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-trycatch\">예외 처리: try~catch</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/230925/#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\">클래스와 인스턴스</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Java/230925/#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EC%9D%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\">클래스 정의와 인스턴스 생성</a></li>\n<li><a href=\"/Java/230925/#%EC%83%9D%EC%84%B1%EC%9E%90%EB%A1%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">생성자로 인스턴스 만들기</a></li>\n<li><a href=\"/Java/230925/#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\">메소드 오버로딩</a></li>\n<li><a href=\"/Java/230925/#%EC%A0%95%EC%A0%81-%ED%95%84%EB%93%9C-%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%83%81%EC%88%98-%ED%95%84%EB%93%9C\">정적 필드, 정적 메소드, 상수 필드</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Java/230925/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2023년 09월 25일","title":"Java Basic","tags":["Java"]}}},"pageContext":{"slug":"/Java/230925/","previous":{"fields":{"slug":"/Computer Science/230628/"},"frontmatter":{"title":"운영체제 프로세스와 쓰레드"}},"next":{"fields":{"slug":"/React Native/231018/"},"frontmatter":{"title":"React Native 내 위치 정보 얻기 (Geolocation Service)"}}}},"staticQueryHashes":["1081905842","3911196313"]}
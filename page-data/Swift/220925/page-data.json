{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/220925/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"Swift가 제공하는 컬렉션 타입 중 key와 value로 묶어서 구성할 수 있는 딕셔너리와, typealias, for in, sorted 등의 메서드 활용하기 딕셔너리(Dictionary) 사용 딕셔너리 는 컬렉션 타입으로, 키와 값 쌍으로 구성된다. 딕셔너리 안에는 키가 하나이거나 여러 개일 수 있다.\nDictionary 키워드를 키의 타입과 값의 …","html":"<blockquote>\n<p>Swift가 제공하는 컬렉션 타입 중 key와 value로 묶어서 구성할 수 있는 딕셔너리와, typealias, for in, sorted 등의 메서드 활용하기</p>\n</blockquote>\n<h2>딕셔너리(Dictionary) 사용</h2>\n<p><strong>딕셔너리</strong> 는 컬렉션 타입으로, 키와 값 쌍으로 구성된다. 딕셔너리 안에는 키가 하나이거나 여러 개일 수 있다.\nDictionary 키워드를 키의 타입과 값의 타입 이름의 조합으로 써서 생성한다.</p>\n<pre><code class=\"language-swift\">// 기본적인 빈 딕셔너리 생성 (Int)\n// var을 사용하여 딕셔너리가 변경 가능하게 하거나, let을 사용하여 변경 불가능한 딕셔너리로 생성\nvar userList: Dictionary&#x3C;String, Int> = Dictionary&#x3C;String, Int>()\nlet userList: Dictionary&#x3C;String, Int> = Dictionary&#x3C;String, Int>()\n\n// 다음과 같이 초깃값을 부여할 수 있음\nlet userList: Dictionary&#x3C;String, Int>\n    = [\"user1\": 1, \"user2\": 2,\"user3\": 3]\n\n// 다음과 같이 작성도 가능\nlet userList: [String: Int]\n    = [\"user1\": 1, \"user2\": 2,\"user3\": 3]\n\nprint(userList[\"user1\"]) // 결과 : Optional(1)\nprint(userList.count) // 결과 : 3\n</code></pre>\n<p><strong>typealias</strong>라는 별칭 키워드는 이미 존재하는 데이터 타입에 임의로 다른 이름을 부여하여 사용할 수 있게 해준다.</p>\n<p>이 기능을 사용하여 보다 간결하게 딕셔너리를 생성할 수 있다.</p>\n<pre><code class=\"language-swift\">// 이미 존재하는 데이터 타입에 임의로 다른 이름을 부여\ntypealias StringDict = [String: Int]\n\n// 빈 딕셔너리 생성\nvar userList: StringDict = [:]\n// 딕셔너리 초깃값 부여\nvar userList: StringDict = [\"user1\": 1, \"user2\": 2,\"user3\": 3]\n\nprint(userList[\"user1\"]) // 결과 : Optional(1)\n</code></pre>\n<p>딕셔너리의 키는 각각의 값에 접근할 수 있게 도와준다. 딕셔너리 내부에서 키는 유일해야 하며, 값은 유일하지 않다.</p>\n<p>만약 딕셔너리 내부에 존재하지 않는 키로 접근하게 되면 <code>nil</code>을 출력하게 된다.</p>\n<pre><code class=\"language-swift\">typealias MyDict = [String: Int]\nvar userList: MyDict = [\"user1\": 1, \"user2\": 2,\"user3\": 3]\n\n// user1 값 수정\nuserList[\"user1\"] = 77\n// user2 값 삭제\nuserList.removeValue(forKey: \"user2\")\n\nprint(userList) // 결과 : [\"user3\": 3, \"user1\": 77]\nprint(userList[\"user2\"]) // 결과 : nil\n</code></pre>\n<h2>반복, 조건, 정렬을 사용하여 응용해보기</h2>\n<p>딕셔너리를 <code>for in</code>으로 반복시키고, 조건문을 작성하여 알맞게 값이 출력될 수 있게끔 만들어 보았다.</p>\n<p>딕셔너리에 user를 key, 해당 user의 시험 점수를 value로 하여 시험 성적표를 담았다.</p>\n<p>그리고 이 딕셔너리에서 시험 점수가 80점이 넘는 user만 출력시켰다.</p>\n<pre><code class=\"language-swift\">typealias MyDict = [String: Int]\n\nvar examScore: MyDict = [\n    \"user1\": 53,\n    \"user2\": 81,\n    \"user3\": 84,\n    \"user4\": 96,\n    \"user5\": 95,\n    \"user6\": 49,\n    \"user7\": 77,\n    \"user8\": 32,\n    \"user9\": 76,\n    \"user10\": 72\n]\n\nfor result in examScore {\n    if(result.value > 80) {\n        print(\"\\(result.key)의 점수는 \\(result.value)\")\n    }\n}\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/220925/dict1.png\" alt=\"dict1\"></p>\n<p>결과에서 볼 수 있듯이 딕셔너리는 요소들이 순서 없이 구성되기 때문에 코드와 무관하게, 값의 크고 작은 순 없이 순서가 무작위로 출력되는 것을 볼 수 있다.</p>\n<p>그렇다면 이를 정렬하려면 어떤 방법이 필요할까?</p>\n<p><code>sorted</code>를 활용하면 원하는 대로 나열할 수 있다.</p>\n<pre><code class=\"language-swift\">typealias MyDict = [String: Int]\n\nvar examScore: MyDict = [\n    \"user1\": 53,\n    \"user2\": 81,\n    \"user3\": 84,\n    \"user4\": 96,\n    \"user5\": 95,\n    \"user6\": 49,\n    \"user7\": 77,\n    \"user8\": 32,\n    \"user9\": 76,\n    \"user10\": 72\n]\n\nlet sortedDict = examScore.sorted { (first, second) in\n    return first.value > second.value\n}\n\nfor result in sortedDict {\n    print(\"\\(result.key)의 점수는 \\(result.value)\")\n}\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/220925/dict2.png\" alt=\"dict2\"></p>\n<p>사본 <code>sortedDict</code>를 만들고 <code>sorted</code>를 value가 높은 순서대로 정렬하게끔 사용하였다.</p>\n<p>원본 딕셔너리의 무작위 순서가 아닌 정렬된 결과를 얻었고, 그 결과를 반복문과 <code>print()</code>를 사용하여 최종적으로 나타냈다.</p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018\" target=\"_blank\" rel=\"noopener noreferrer\">스위프트 프로그래밍(3판)</a></p>\n<p><a href=\"https://2unbini.github.io/%F0%9F%93%82%20all/swift/dictionary-sorted/\" target=\"_blank\" rel=\"noopener noreferrer\">스위프트 딕셔너리 정렬, Swift Dictionary sorted() - SeriOSly</a></p>","tableOfContents":"<ul>\n<li><a href=\"/Swift/220925/#%EB%94%95%EC%85%94%EB%84%88%EB%A6%ACdictionary-%EC%82%AC%EC%9A%A9\">딕셔너리(Dictionary) 사용</a></li>\n<li><a href=\"/Swift/220925/#%EB%B0%98%EB%B3%B5-%EC%A1%B0%EA%B1%B4-%EC%A0%95%EB%A0%AC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9D%91%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">반복, 조건, 정렬을 사용하여 응용해보기</a></li>\n<li><a href=\"/Swift/220925/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 09월 25일","title":"딕셔너리(Dictionary)","tags":["Swift","Dictionary","Typealias"]}}},"pageContext":{"slug":"/Swift/220925/","previous":{"fields":{"slug":"/Markdown/220924/"},"frontmatter":{"title":"마크다운(Markdown)"}},"next":{"fields":{"slug":"/Data Structure/220929/"},"frontmatter":{"title":"Stack, Queue"}}}},"staticQueryHashes":["1081905842","3911196313"]}
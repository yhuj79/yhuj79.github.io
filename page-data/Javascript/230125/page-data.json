{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/230125/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"자바스크립트에서 구조 분해 할당은 객체 또는 배열의 속성을 분해하고 개별 변수를 쉽고 편리하게 할당하여 사용할 수 있게 해준다. 구조 분해 할당이란? Javascript의 객체와 배열은 굉장히 자주 사용되는 구조이다. 이를 효과적으로 사용하기 위한 방법 중에 구조 분해 할당(Destructuring Assignment)이 있는데, 객체 또는 배열에서 일부…","html":"<blockquote>\n<p>자바스크립트에서 구조 분해 할당은 객체 또는 배열의 속성을 분해하고 개별 변수를 쉽고 편리하게 할당하여 사용할 수 있게 해준다.</p>\n</blockquote>\n<h2>구조 분해 할당이란?</h2>\n<p>Javascript의 객체와 배열은 굉장히 자주 사용되는 구조이다. 이를 효과적으로 사용하기 위한 방법 중에 <strong>구조 분해 할당(Destructuring Assignment)</strong>이 있는데, 객체 또는 배열에서 일부만 사용하고 싶을 경우 변수로 분해하여 값을 개별 변수에 담아 사용할 수 있게 도와준다.</p>\n<h2>배열 분해</h2>\n<p>먼저 배열을 분해하는 간단한 방법이다.</p>\n<pre><code class=\"language-javascript\">let arr = [\"apple\", \"banana\", \"tomato\", \"pear\", \"grapes\"]\n\n// let one = arr[0]\n// let two = arr[1]\n// let three = arr[2]\n// let four = arr[3]\n// let five = arr[4]    // 배열의 값을 각각 저장\n\nlet [one, two, three, four, five] = arr // 위 코드와 동일하게 동작\n\nconsole.log(one) // apple\nconsole.log(two) // banana\nconsole.log(three) // tomato\nconsole.log(four) // pear\nconsole.log(five) // grapes\n</code></pre>\n<p>좌변은 값을 담을 변수, 우변에는 분해 할 값이 위치한다. 배열의 요소를 직접 변수에 할당하지 않고 원래의 arr을 복사 후 분해하여 one, two, three로 사용 할 수 있어 직접 변수에 할당하는 것보다 코드의 양을 대폭 줄일 수 있다.</p>\n<h2>객체 분해</h2>\n<p>객체 분해 또한 배열과 유사하다.</p>\n<pre><code class=\"language-javascript\">let user = {\n  name: \"James\",\n  job: \"developer\",\n  age: 28,\n}\n\nlet { name, job, age } = user\n\nconsole.log(name) // James\nconsole.log(job) // developer\nconsole.log(age) // 28\n</code></pre>\n<p>여기서 좌변 프로퍼티 키를 다른 이름의 변수로 저장할 수 있다.</p>\n<pre><code class=\"language-javascript\">let user = {\n  name: \"James\",\n  job: \"developer\",\n  age: 28,\n}\n\n// 각각 name을 a, job을 b, age를 c로 저장\nlet { name: a, job: b, age: c } = user\n\nconsole.log(a) // James\nconsole.log(b) // developer\nconsole.log(c) // 28\n</code></pre>\n<h2>다양한 분해 형태</h2>\n<h3>기본값 설정</h3>\n<p>좌변에 기본값을 미리 부여한 후, 할당된 값이 없을 시 기본값이 출력된다.</p>\n<pre><code class=\"language-javascript\">let one, two\n;[one = \"apple\", two = \"banana\"] = [\"tomato\"] // one에만 값이 할당됨\nconsole.log(one) // tomato\nconsole.log(two) // banana // 할당된 값이 없어 기본값이 출력됨\n</code></pre>\n<p>객체에서도 위와 같이 기본값을 설정할 수 있다.</p>\n<h3>배열 요소 버리기</h3>\n<p>쉼표를 사용하여 사용하지 않을 배열 요소를 건너뛸 수 있다. 오타를 주의해야 할 것 같다.</p>\n<pre><code class=\"language-javascript\">let arr = [\"apple\", \"banana\", \"tomato\", \"pear\", \"grapes\", \"mango\"]\n\nlet [one, two, , three, , four] = arr\n\nconsole.log(`${one}, ${two}, ${three}, ${four}`)\n// apple, banana, pear, mango\n</code></pre>\n<h3>나머지 요소</h3>\n<p><code>...</code> 패턴을 이용하여 나머지 배열, 객체 요소를 한데 모아서 저장할 수 있다.</p>\n<pre><code class=\"language-javascript\">let arr = [\"apple\", \"banana\", \"tomato\", \"pear\", \"grapes\", \"mango\"]\n\nlet user = {\n  name: \"James\",\n  job: \"developer\",\n  age: 28,\n}\n\nlet [one, two, three, ...other] = arr // 나머지를 other에 저장\nlet { name: a, ...rest } = user\n\nconsole.log(`${one}, ${two}, ${three}`)\n// apple, banana, tomato\n\nconsole.log(`나머지 : ${other}`)\n// 나머지 : pear,grapes,mango\n\nconsole.log(`job: ${rest.job}, age: ${rest.age}`)\n// job: developer, age: 28\n</code></pre>\n<h3>객체 프로퍼티</h3>\n<p>좌변의 변수로 객체 프로퍼티와 같은 형태도 사용 가능하다. 할당 가능한 값이면 뭐든지 사용할 수 있다고 한다.</p>\n<pre><code class=\"language-javascript\">let arr = [\"apple\", \"banana\", \"tomato\", \"pear\", \"grapes\", \"mango\"]\n\nlet fruit = {}\n\n;[fruit.one, fruit.two, fruit.three] = arr\n\nconsole.log(fruit)\n// {one: \"apple\", two: \"banana\", three: \"tomato\"}\n</code></pre>\n<h3>변수 교환</h3>\n<p>변수를 교환할 때 구조 분해 할당을 사용할 수 있다.</p>\n<pre><code class=\"language-javascript\">let apple = \"apple\"\nlet banana = \"banana\"\n\n;[apple, banana] = [banana, apple] // 임시 배열을 이용하여 배열을 분해\n\nconsole.log(`${apple}, ${banana}`) // banana, apple\n</code></pre>\n<h2>JSON 구조 분해 할당</h2>\n<p>json 데이터에서 어떠한 값만 순회하여 출력하고 싶을 경우, <code>Object.entries</code> 메서드와 구조 분해를 활용하여 나타낼 수 있다. <a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jsonplaceholder</a>에서는 테스트를 위한 무료 fake api를 지원한다.</p>\n<p>전체 URL은 <code>https://jsonplaceholder.typicode.com/ + 리소스명</code>으로 접속이 되고, 각 응답의 내용은 리소스 별로 다르다. axios를 통해 jsonplaceholder의 리소스를 받아 보았다.</p>\n<pre><code class=\"language-javascript\">axios({\n  url: \"https://jsonplaceholder.typicode.com/users\",\n  method: \"get\",\n}).then(function (response) {\n  console.log(JSON.stringify(response.data, null, 5))\n})\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230125/jsonplaceholder.png\" alt=\"jsonplaceholder\"></p>\n<p>jsonplaceholder의 users에는 총 10명의 정보가 들어있다. id, 이름, 이메일, 주소 등등...</p>\n<p>모든 user의 이름을 나타내기 위해 다음과 같이 코드를 작성했다.</p>\n<pre><code class=\"language-javascript\">axios({\n  url: \"https://jsonplaceholder.typicode.com/users\",\n  method: \"get\",\n}).then(function (response) {\n  for (let [key, value] of Object.entries(response.data)) {\n    console.log(`id : ${key}\\nname : ${value.name}`)\n  }\n})\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230125/objectEntries.png\" alt=\"objectEntries\"></p>\n<p><code>Object.entries</code> 메서드를 사용하면 객체 자체의 enumerable 속성 [key, value] 쌍의 배열을 반환, 객체의 키(key)와 값(value)을 순회할 수 있다. response.data에 있는 value의 name을 순회하며 모든 user의 이름을 얻을 수 있게 되었다.</p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://ko.javascript.info/destructuring-assignment\" target=\"_blank\" rel=\"noopener noreferrer\">구조 분해 할당 | 모던 JavaScript 튜토리얼</a></p>\n<p><a href=\"https://beomy.tistory.com/18\" target=\"_blank\" rel=\"noopener noreferrer\">[자바스크립트] ES6(ECMA Script 6) - 구조분해 할당(Destructuring assignment)</a></p>\n<p><a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"noopener noreferrer\">JSONPlaceholder - Free Fake REST API</a></p>","tableOfContents":"<ul>\n<li><a href=\"/Javascript/230125/#%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9%EC%9D%B4%EB%9E%80\">구조 분해 할당이란?</a></li>\n<li><a href=\"/Javascript/230125/#%EB%B0%B0%EC%97%B4-%EB%B6%84%ED%95%B4\">배열 분해</a></li>\n<li><a href=\"/Javascript/230125/#%EA%B0%9D%EC%B2%B4-%EB%B6%84%ED%95%B4\">객체 분해</a></li>\n<li>\n<p><a href=\"/Javascript/230125/#%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B6%84%ED%95%B4-%ED%98%95%ED%83%9C\">다양한 분해 형태</a></p>\n<ul>\n<li><a href=\"/Javascript/230125/#%EA%B8%B0%EB%B3%B8%EA%B0%92-%EC%84%A4%EC%A0%95\">기본값 설정</a></li>\n<li><a href=\"/Javascript/230125/#%EB%B0%B0%EC%97%B4-%EC%9A%94%EC%86%8C-%EB%B2%84%EB%A6%AC%EA%B8%B0\">배열 요소 버리기</a></li>\n<li><a href=\"/Javascript/230125/#%EB%82%98%EB%A8%B8%EC%A7%80-%EC%9A%94%EC%86%8C\">나머지 요소</a></li>\n<li><a href=\"/Javascript/230125/#%EA%B0%9D%EC%B2%B4-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">객체 프로퍼티</a></li>\n<li><a href=\"/Javascript/230125/#%EB%B3%80%EC%88%98-%EA%B5%90%ED%99%98\">변수 교환</a></li>\n</ul>\n</li>\n<li><a href=\"/Javascript/230125/#json-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9\">JSON 구조 분해 할당</a></li>\n<li><a href=\"/Javascript/230125/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2023년 01월 25일","title":"구조 분해 할당","tags":["Javascript"]}}},"pageContext":{"slug":"/Javascript/230125/","previous":{"fields":{"slug":"/React/230115/"},"frontmatter":{"title":"Heroku에 Express 서버 배포하기"}},"next":{"fields":{"slug":"/React/230214/"},"frontmatter":{"title":"React-Quill Editor 이미지 처리하기 (Firebase Storage)"}}}},"staticQueryHashes":["1081905842","3911196313"]}
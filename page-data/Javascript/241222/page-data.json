{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/241222/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"V8은 Google에서 개발한 오픈소스 자바스크립트 엔진으로, 주로 Chrome 브라우저와 Node.js에서 사용된다. V8은 자바스크립트 코드를 기계어로 변환하여 실행하는 고성능 엔진이며, 최신 웹 애플리케이션과 서버 애플리케이션의 핵심 역할을 담당하고 있다. 스크립트 언어와 현대 프로그래밍 프로그래밍 언어는 보통 작동 방식에 따라 컴파일 언어(Comp…","html":"<blockquote>\n<p>V8은 Google에서 개발한 오픈소스 자바스크립트 엔진으로, 주로 Chrome 브라우저와 Node.js에서 사용된다. V8은 자바스크립트 코드를 기계어로 변환하여 실행하는 고성능 엔진이며, 최신 웹 애플리케이션과 서버 애플리케이션의 핵심 역할을 담당하고 있다.</p>\n</blockquote>\n<h2 id=\"스크립트-언어와-현대-프로그래밍\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4%EC%99%80-%ED%98%84%EB%8C%80-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"스크립트 언어와 현대 프로그래밍 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크립트 언어와 현대 프로그래밍</h2>\n<p>프로그래밍 언어는 보통 작동 방식에 따라 컴파일 언어(Compiled Language)와 인터프리터 언어(Interpreter Language)로 구분되곤 한다. 초기 스크립트 언어는 주로 대형 컴퓨터 시스템에서 작업 자동화를 목적으로 사용되었지만, 현재는 뛰어난 범용성과 확장성을 바탕으로 복잡한 응용 프로그램 개발에도 효과적으로 사용되고 있다.</p>\n<p>과거에는 스크립트 언어가 컴파일 언어에 비해 실행 속도가 느리다는 평가를 받았으나, 현대에는 AJITC와 같은 기술 덕분에 이 격차가 크게 줄어들었다. AJITC(Adaptive Just-In-Time Compilation)는 컴파일러와 인터프리터의 장점을 결합한 개념으로, 스크립트 언어의 실행 성능을 네이티브 컴파일 언어와 유사한 수준으로 끌어올렸다. 이러한 기술의 발전은 컴파일 언어와 인터프리터 언어 간의 구분이 점차 희미해지고 있음을 보여준다.</p>\n<p>Chrome의 V8 엔진은 JIT 컴파일러를 기반으로 인터프리터와 컴파일러 방식을 결합하여 동작하는 대표적인 예이다. 이처럼 현대 자바스크립트 엔진은 빠른 실행 속도와 높은 효율성을 동시에 추구하며 진화하고 있다.</p>\n<p><a href=\"https://yhuj79.github.io/Computer%20Science/241021\" target=\"_blank\" rel=\"noopener noreferrer\">스크립트 언어의 진화와 미래 기술 동향</a></p>\n<h2 id=\"v8-엔진\" style=\"position:relative;\"><a href=\"#v8-%EC%97%94%EC%A7%84\" aria-label=\"v8 엔진 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>V8 엔진</h2>\n<p>자바스크립트 엔진은 자바스크립트 소스 코드를 기계어로 변환하여 실행하는 프로그램이다. 브라우저마다 각기 다른 엔진을 사용하지만, 기본적인 작동 원리는 유사하다. Google Chrome과 Node.js에서 사용되는 V8 엔진은 C++로 작성된 오픈소스 엔진으로, 높은 성능과 효율성을 자랑한다.</p>\n<img alt=\"v8-1\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/241221/v8-1.png\">\n<img alt=\"v8-2\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/241221/v8-2.png\">\n<h4 id=\"1-parsing\" style=\"position:relative;\"><a href=\"#1-parsing\" aria-label=\"1 parsing permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Parsing</h4>\n<p>자바스크립트 엔진은 소스 코드를 파싱하여 <strong>Abstract Syntax Tree</strong>를 생성한다. AST는 코드의 문법 구조를 계층적으로 표현한 데이터 구조로, 컴파일러가 이해할 수 있는 형태로 변환하기 위한 첫 단계이다.</p>\n<h4 id=\"2-interpreter-ignition\" style=\"position:relative;\"><a href=\"#2-interpreter-ignition\" aria-label=\"2 interpreter ignition permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Interpreter: Ignition</h4>\n<p>V8 엔진의 인터프리터는 <strong>Ignition</strong>으로, AST를 바탕으로 <strong>Bytecode</strong>를 생성하고 실행한다. Bytecode는 가상 머신에서 실행 가능한 중간 언어로, 플랫폼 독립성을 제공한다. Ignition은 코드 실행 초기 단계에서 빠르게 바이트코드를 생성하여 즉시 실행할 수 있도록 한다.</p>\n<h4 id=\"3-optimizing-compiler-turbofan\" style=\"position:relative;\"><a href=\"#3-optimizing-compiler-turbofan\" aria-label=\"3 optimizing compiler turbofan permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Optimizing Compiler: TurboFan</h4>\n<p>자바스크립트 코드 실행 중 프로파일링 데이터를 수집하여 <strong>뜨거운 코드(hot code)</strong>를 식별한다. 뜨거운 코드에 대해서는 아래 AJITC 부분에서 설명한다. 이러한 코드는 TurboFan이라는 최적화 컴파일러로 전달되어 고도로 최적화된 기계어로 변환된다. 최적화된 기계어는 반복 실행 시 성능을 크게 향상시킨다.</p>\n<h4 id=\"4-deoptimization\" style=\"position:relative;\"><a href=\"#4-deoptimization\" aria-label=\"4 deoptimization permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Deoptimization</h4>\n<p>만약 프로파일링 데이터가 변경되거나, 최적화된 코드가 예상치 못한 결과를 초래할 경우, 엔진은 최적화된 코드를 버리고 다시 Bytecode로 되돌린다. 이를 통해 실행 환경의 변화를 유연하게 처리한다.</p>\n<h2 id=\"ajitc-adaptive-just-in-time-compilation\" style=\"position:relative;\"><a href=\"#ajitc-adaptive-just-in-time-compilation\" aria-label=\"ajitc adaptive just in time compilation permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AJITC (Adaptive Just-In-Time Compilation)</h2>\n<img alt=\"jit\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/241221/jit.png\">\n<p>JIT 컴파일(Just-In-Time Compilation)은 프로그램을 실제 실행하는 시점에 기계어로 번역하는 컴파일 기법이다. V8은 <strong>AJITC</strong>를 통해 성능과 유연성을 극대화한다. 적응형 JIT 컴파일 방식으로, 모든 코드를 기계어로 변환하지 않고 자주 실행되는 코드만 선택적으로 최적화한다. 이를 통해 <strong>Compilation Overhead(컴파일 과부하)</strong>를 최소화하고 실행 성능을 개선한다.</p>\n<p>다음은 예시 javascript 코드이다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">sum</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">a</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">b</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">a</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk4\">b</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">i</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk4\">i</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">; </span><span class=\"mtk4\">i</span><span class=\"mtk8\">++</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">sum</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>위 함수는 반복적으로 호출되면서 <strong>뜨거운 코드</strong>로 간주된다. <strong>TurboFan은 이러한 코드를 최적화하여 실행 속도를 높인다.</strong> 하지만 동일 함수가 다른 데이터 타입과 함께 호출되면, 기존 최적화된 코드가 무효화되고 Deoptimization이 발생한다.</p>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://www.youtube.com/watch?v=5nmpokoRaZI&#x26;ab_channel=JSConf\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Engines: The Good Parts - Benedikt Meurer, Mathias Bynens</a></p>\n<p><a href=\"https://medium.com/@poojasharma_93670/sneak-peek-into-javascript-v8-engine-d2bb2eb2bdb2\" target=\"_blank\" rel=\"noopener noreferrer\">Sneak Peek into Javascript V8 Engine - Pooja Sharma</a></p>\n<p><a href=\"https://v8.dev\" target=\"_blank\" rel=\"noopener noreferrer\">V8 JavaScript engine</a></p>\n<p><a href=\"https://velog.io/@godori/JavaScript-engine-1\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 엔진 톺아보기</a></p>\n<p><a href=\"https://velog.io/@kich555/JIT-Compiler-Chrome-V8-Engine\" target=\"_blank\" rel=\"noopener noreferrer\">JIT Compiler &#x26; Chrome V8 Engine</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Javascript/241222/#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4%EC%99%80-%ED%98%84%EB%8C%80-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">스크립트 언어와 현대 프로그래밍</a></li>\n<li>\n<p><a href=\"/Javascript/241222/#v8-%EC%97%94%EC%A7%84\">V8 엔진</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Javascript/241222/#1-parsing\">1. Parsing</a></li>\n<li><a href=\"/Javascript/241222/#2-interpreter-ignition\">2. Interpreter: Ignition</a></li>\n<li><a href=\"/Javascript/241222/#3-optimizing-compiler-turbofan\">3. Optimizing Compiler: TurboFan</a></li>\n<li><a href=\"/Javascript/241222/#4-deoptimization\">4. Deoptimization</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Javascript/241222/#ajitc-adaptive-just-in-time-compilation\">AJITC (Adaptive Just-In-Time Compilation)</a></li>\n<li><a href=\"/Javascript/241222/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2024년 12월 21일","title":"Javascript V8 작동 원리","tags":["Javascript","V8"]}}},"pageContext":{"slug":"/Javascript/241222/","previous":{"fields":{"slug":"/Computer Science/241119/"},"frontmatter":{"title":"MVC, MVP, MVVM"}},"next":null}},"staticQueryHashes":["1081905842","3911196313"]}
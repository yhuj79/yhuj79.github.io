{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/240322/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"컴퓨터 과학에서 정렬 알고리즘은 데이터를 효율적으로 정돈하는 핵심적인 작업이다. 이러한 알고리즘은 데이터의 크기와 유형에 관계없이 사용될 수 있으며, 다양한 응용 분야에서 중요한 역할을 맡는다. 버블 정렬, 선택 정렬, 삽입 정렬에 대해 알아보고, 각각 C언어와 Javascript로 나타내어 보았다. 버블 정렬(Bubble Sort) 버블 정렬은 주어진 …","html":"<blockquote>\n<p>컴퓨터 과학에서 정렬 알고리즘은 데이터를 효율적으로 정돈하는 핵심적인 작업이다. 이러한 알고리즘은 데이터의 크기와 유형에 관계없이 사용될 수 있으며, 다양한 응용 분야에서 중요한 역할을 맡는다. 버블 정렬, 선택 정렬, 삽입 정렬에 대해 알아보고, 각각 C언어와 Javascript로 나타내어 보았다.</p>\n</blockquote>\n<h2>버블 정렬(Bubble Sort)</h2>\n<p>버블 정렬은 주어진 배열, 리스트에서 인접한 두 개의 값을 비교하여 그 크기에 따라 위치를 서로 교환하는 정렬 방식이다. 앞의 값이 뒤의 값보다 클 경우, 서로의 위치를 바꾸는 교환이 발생한다. 배열의 끝까지 비교가 완료되면 다시 처음으로 돌아와 이를 반복한다. 따라서 이 알고리즘은 배열을 한 번 통째로 살펴보면서 가장 큰 원소를 배열의 끝으로 이동시키는 과정을 반복하여 정렬을 수행한다.</p>\n<img alt='bubble1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240322/bubble1.gif'>\n<p>진행 흐름을 나타내 본다면 위 그림과 같을 것이다.</p>\n<p>위의 <code>6, 5, 3, 1, 8, 7, 2, 4</code> 배열을 버블 정렬하는 코드를 C언어를 통해 작성해 보았다.</p>\n<pre><code class=\"language-c\">// C 버블 정렬 코드\n\n#include &#x3C;stdio.h>\n\nvoid bubbleSort(int arr[], int n)\n{\n    int i, j;\n    for (i = 0; i &#x3C; n - 1; i++)\n    {\n        // 한 번의 루프에서 가장 큰 수를 맨 끝으로 보내기 위한 루프\n        for (j = 0; j &#x3C; n - i - 1; j++)\n        {\n            // 인접한 원소 비교 후 필요에 따라 교환\n            if (arr[j] > arr[j + 1])\n            {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nvoid printArray(int arr[], int size)\n{\n    int i;\n    for (i = 0; i &#x3C; size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main()\n{\n    int arr[] = {6, 5, 3, 1, 8, 7, 2, 4};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Original array: \\n\");\n    printArray(arr, n);\n    bubbleSort(arr, n);\n    printf(\"Sorted array: \\n\");\n    printArray(arr, n);\n    return 0;\n}\n</code></pre>\n<p>지정된 배열을 버블 정렬 알고리즘을 사용하여 정렬한다. <code>bubbleSort()</code> 함수는 배열을 받아서 버블 정렬을 수행하고, <code>printArray()</code> 함수는 배열의 요소를 출력한다. <code>main()</code> 함수에서는 주어진 배열을 초기화하고 정렬 후 결과를 출력한다.</p>\n<p>Javascript로 작성하는 버블 정렬 코드는 정해진 배열을 주지 않고, 정렬할 데이터의 개수를 입력하고 정렬에 걸리는 시간을 측정하여 보았다.</p>\n<pre><code class=\"language-javascript\">// Javascript 버블 정렬 코드\n\nfunction bubbleSort(arr) {\n  var len = arr.length\n  var swapped\n  do {\n    swapped = false\n    for (var i = 0; i &#x3C; len - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        var temp = arr[i]\n        arr[i] = arr[i + 1]\n        arr[i + 1] = temp\n        swapped = true\n      }\n    }\n  } while (swapped)\n}\n\n// 함수 실행 시간 측정 함수\nfunction measureTimeTaken(callback) {\n  var startTime = performance.now()\n  callback()\n  var endTime = performance.now()\n  return (endTime - startTime) / 1000 // 밀리초를 초로 변환\n}\n\n// 사용자 입력 및 실행\nvar readline = require(\"readline\")\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\nrl.question(\"Input : \", function (n) {\n  n = parseInt(n)\n  var min = 1 // 랜덤 수의 최솟값\n  var max = 1000 // 랜덤 수의 최댓값\n\n  // 랜덤 수 생성\n  var randomArray = []\n  for (var i = 0; i &#x3C; n; i++) {\n    randomArray.push(Math.floor(Math.random() * (max - min + 1)) + min)\n  }\n\n  // 버블 정렬 실행 및 실행 시간 측정\n  var timeTaken = measureTimeTaken(function () {\n    bubbleSort(randomArray)\n  })\n\n  // 결과 출력\n  console.log(\"Result : \", timeTaken.toFixed(2), \"seconds\")\n\n  rl.close()\n})\n</code></pre>\n<img alt='bubble2' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240322/bubble2.png'>\n<p>10000, 20000, 40000, 80000으로 입력 개수를 2배씩 증가시켜 보았다. 버블 정렬의 시간 복잡도는 <code>O(N²)</code>으로, 데이터의 양이 증가함에 따라 실행 시간이 제곱으로 증가한다. 하지만 정확한 제곱을 뜻하는 것은 아니고, 데이터의 크기가 2배로 증가하면 걸리는 시간은 일반적으로 4배가 아닌 4배보다 더 많이 증가한다고 보면 된다. 위의 실행 결과처럼.</p>\n<h2>선택 정렬(Selection Sort)</h2>\n<p>선택 정렬은 n 개의 값 중에서 최소값을 찾아 첫 번째 위치에 놓고, 나머지 n-1 개 중에서 다시 최소값을 찾아 두 번째 위치에 놓는 방식을 반복하여 정렬하는 방식이다.</p>\n<img alt='selection1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240322/selection1.gif'>\n<p>선택 정렬의 동작은 다음과 같다.</p>\n<ol>\n<li>주어진 배열에서 최솟값(또는 최댓값) 찾기</li>\n<li>최솟값(또는 최댓값)을 배열의 맨 앞 원소와 교환</li>\n<li>위 과정을 반복하여 배열의 정렬이 완료될 때까지 진행</li>\n</ol>\n<pre><code class=\"language-c\">// C 선택 정렬 코드\n\n#include &#x3C;stdio.h>\n\nvoid selectionSort(int arr[], int n)\n{\n    int i, j, min_idx;\n    // 배열의 모든 요소에 대해 반복\n    for (i = 0; i &#x3C; n - 1; i++)\n    {\n        // 현재 위치부터 끝까지 가장 작은 요소의 인덱스를 찾음\n        min_idx = i;\n        for (j = i + 1; j &#x3C; n; j++)\n        {\n            if (arr[j] &#x3C; arr[min_idx])\n                min_idx = j;\n        }\n        // 현재 위치와 가장 작은 요소의 위치를 교환\n        int temp = arr[min_idx];\n        arr[min_idx] = arr[i];\n        arr[i] = temp;\n    }\n}\n\nvoid printArray(int arr[], int size)\n{\n    int i;\n    for (i = 0; i &#x3C; size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main()\n{\n    int arr[] = {6, 5, 3, 1, 8, 7, 2, 4};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Original array: \\n\");\n    printArray(arr, n);\n    selectionSort(arr, n);\n    printf(\"Sorted array: \\n\");\n    printArray(arr, n);\n    return 0;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">// Javascript 선택 정렬 코드\n\nfunction selectionSort(arr) {\n  var len = arr.length\n  for (var i = 0; i &#x3C; len - 1; i++) {\n    var minIndex = i\n    // 현재 위치부터 끝까지 가장 작은 요소의 인덱스를 찾음\n    for (var j = i + 1; j &#x3C; len; j++) {\n      if (arr[j] &#x3C; arr[minIndex]) {\n        minIndex = j\n      }\n    }\n    // 현재 위치와 가장 작은 요소의 위치를 교환\n    if (minIndex !== i) {\n      var temp = arr[i]\n      arr[i] = arr[minIndex]\n      arr[minIndex] = temp\n    }\n  }\n}\n\nfunction measureTimeTaken(callback) {\n  var startTime = performance.now()\n  callback()\n  var endTime = performance.now()\n  return (endTime - startTime) / 1000\n}\n\nvar readline = require(\"readline\")\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\nrl.question(\"Input : \", function (n) {\n  n = parseInt(n)\n  var min = 1\n  var max = 1000\n\n  var randomArray = []\n  for (var i = 0; i &#x3C; n; i++) {\n    randomArray.push(Math.floor(Math.random() * (max - min + 1)) + min)\n  }\n\n  // 선택 정렬 실행 및 실행 시간 측정\n  var timeTaken = measureTimeTaken(function () {\n    selectionSort(randomArray)\n  })\n\n  console.log(\"Result : \", timeTaken.toFixed(2), \"seconds\")\n\n  rl.close()\n})\n</code></pre>\n<img alt='selection2' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240322/selection2.png'>\n<p>선택 정렬 또한 마찬가지로 버블 정렬과 동일한 <code>O(N²)</code>의 시간복잡도를 갖는다. 하지만 버블 정렬보다 약 두 배 가량 빠른 것을 볼 수 있다.</p>\n<h2>삽입 정렬(Insertion Sort)</h2>\n<p>삽입 정렬은 가장 간단한 정렬 방식으로, 이미 순서화된 파일에 새로운 하나의 값를 순서에 맞게 삽입시켜 정렬하는 방식이다. 선택 정렬과 함께 인간에게 뭔가를 정렬하라고 하면 무의식적으로 사용하는 대표적인 알고리즘이다.</p>\n<img alt='insertion1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240322/insertion1.gif'>\n<p>삽입 정렬은 배열이 작을 경우 상당히 효율적으로, 일반적으로 빠르다고 알려진 알고리즘이라 할지라도 배열이 작다면 대부분 삽입 정렬이 성능에서 우위를 점한다. 따라서 고성능 알고리즘들 중에서는 배열의 사이즈가 클때는 <code>O(nlogn)</code> 알고리즘을 쓰다가 정렬해야 할 부분이 작을 때는 삽입 정렬로 전환하는 경우도 있다.</p>\n<p>마찬가지로 C와 Javascript로 구현해 보았다.</p>\n<pre><code class=\"language-c\">// C 삽입 정렬 코드\n\n#include &#x3C;stdio.h>\n\nvoid insertionSort(int arr[], int n) {\n    int i, key, j;\n    // 배열의 각 요소에 대해 반복\n    for (i = 1; i &#x3C; n; i++) {\n        key = arr[i];\n        j = i - 1;\n\n        // key보다 큰 요소들을 오른쪽으로 이동\n        while (j >= 0 &#x26;&#x26; arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nvoid printArray(int arr[], int size) {\n    int i;\n    for (i = 0; i &#x3C; size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {6, 5, 3, 1, 8, 7, 2, 4};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Original array: \\n\");\n    printArray(arr, n);\n    insertionSort(arr, n);\n    printf(\"Sorted array: \\n\");\n    printArray(arr, n);\n    return 0;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">// Javascript 삽입 정렬 코드\n\nfunction insertionSort(arr) {\n  var len = arr.length\n  for (var i = 1; i &#x3C; len; i++) {\n    var key = arr[i]\n    var j = i - 1\n    // key보다 큰 요소들을 오른쪽으로 이동\n    while (j >= 0 &#x26;&#x26; arr[j] > key) {\n      arr[j + 1] = arr[j]\n      j = j - 1\n    }\n    arr[j + 1] = key\n  }\n}\n\nfunction measureTimeTaken(callback) {\n  var startTime = performance.now()\n  callback()\n  var endTime = performance.now()\n  return (endTime - startTime) / 1000\n}\n\nvar readline = require(\"readline\")\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\nrl.question(\"Input : \", function (n) {\n  n = parseInt(n)\n  var min = 1\n  var max = 1000\n\n  var randomArray = []\n  for (var i = 0; i &#x3C; n; i++) {\n    randomArray.push(Math.floor(Math.random() * (max - min + 1)) + min)\n  }\n\n  // 삽입 정렬 실행 및 실행 시간 측정\n  var timeTaken = measureTimeTaken(function () {\n    insertionSort(randomArray)\n  })\n\n  console.log(\"Result : \", timeTaken.toFixed(2), \"seconds\")\n\n  rl.close()\n})\n</code></pre>\n<img alt='insertion2' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240322/insertion2.png'>\n<p>삽입 정렬 또한 <code>O(N²)</code>의 시간복잡도를 갖는다. 역시 <code>O(N²)</code>들 중 빠른 편에 속하는 삽입 정렬 답게 포스트에서 다룬 알고리즘들 중 가장 빠른 결과값이 나왔다. 최선의 경우 <code>O(N)</code>이라는 엄청나게 빠른 효율성을 가지고 있기 때문이다. 하지만 입력 데이터가 역순으로 정렬되어 있다면 결국 최악의 성능이 나온다.</p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://www.booksr.co.kr/product/%EC%95%8C%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EC%A0%95%ED%8C%90/\" target=\"_blank\" rel=\"noopener noreferrer\">알기 쉬운 알고리즘 (개정판) | 생능출판사</a></p>\n<p><a href=\"https://www.gilbut.co.kr/book/view?bookcode=BN003987\" target=\"_blank\" rel=\"noopener noreferrer\">2024 시나공 정보처리기사 실기 기본서 : 길벗, 이지톡</a></p>\n<p><a href=\"https://commons.wikimedia.org/wiki/Main_Page\" target=\"_blank\" rel=\"noopener noreferrer\">Wikimedia Commons</a></p>\n<p><a href=\"https://woongsin94.tistory.com/211\" target=\"_blank\" rel=\"noopener noreferrer\">정렬 알고리즘</a></p>\n<p><a href=\"https://levelup.gitconnected.com/sorting-algorithms-selection-sort-bubble-sort-merge-sort-and-quicksort-75479f8f80b1\" target=\"_blank\" rel=\"noopener noreferrer\">Sorting Algorithms | by Sebastian De Lima</a></p>","tableOfContents":"<ul>\n<li><a href=\"/Algorithm/240322/#%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%ACbubble-sort\">버블 정렬(Bubble Sort)</a></li>\n<li><a href=\"/Algorithm/240322/#%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%ACselection-sort\">선택 정렬(Selection Sort)</a></li>\n<li><a href=\"/Algorithm/240322/#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%ACinsertion-sort\">삽입 정렬(Insertion Sort)</a></li>\n<li><a href=\"/Algorithm/240322/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2024년 03월 22일","title":"버블, 선택, 삽입 정렬 알고리즘 C, Javascript로 구현하기","tags":["Algorithm","C","Javascript"]}}},"pageContext":{"slug":"/Algorithm/240322/","previous":{"fields":{"slug":"/Computer Science/240207/"},"frontmatter":{"title":"소프트웨어 설계 주요 내용"}},"next":{"fields":{"slug":"/Certification/240504/"},"frontmatter":{"title":"정보처리기사 후기"}}}},"staticQueryHashes":["1081905842","3911196313"]}
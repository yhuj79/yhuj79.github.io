{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/250416/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"백트래킹(Backtracking)은 해결할 문제에 대한 해답 후보를 체계적으로 탐색하는 알고리즘적 기법이다. 가지치기(Pruning)를 통해 불필요한 연산을 줄여가며 점진적으로 해를 찾아가는 방식으로, 특히 조합 탐색(Combination Search)과 같이 탐색 범위가 넓은 문제에서 큰 효과를 발휘한다. 백트래킹(Backtracking) 백트래킹은 모…","html":"<blockquote>\n<p>백트래킹(Backtracking)은 해결할 문제에 대한 해답 후보를 체계적으로 탐색하는 알고리즘적 기법이다. 가지치기(Pruning)를 통해 불필요한 연산을 줄여가며 점진적으로 해를 찾아가는 방식으로, 특히 조합 탐색(Combination Search)과 같이 탐색 범위가 넓은 문제에서 큰 효과를 발휘한다.</p>\n</blockquote>\n<h2 id=\"백트래킹backtracking\" style=\"position:relative;\"><a href=\"#%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9backtracking\" aria-label=\"백트래킹backtracking permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백트래킹(Backtracking)</h2>\n<p>백트래킹은 모든 가능한 해답 후보를 탐색하되, 가능한 가지를 모두 뻗어 나가면서도 ‘이 경로는 답이 되기 어렵다’고 판단되는 순간 탐색을 중단(Pruning)하는 방식을 사용한다. 즉, 완전 탐색(Brute Force)의 변형으로, 조건을 만족하지 않는 경로는 더 이상 진행하지 않는 “가지치기” 방법을 통해 불필요한 시도를 줄이는 것이다. 완전 탐색보다 훨씬 효율적인 경우가 많지만, 여전히 최악의 경우 시간 복잡도가 매우 커질 수 있다는 점을 유의해야 한다.</p>\n<p>백트래킹은 재귀(Recursion) 기반으로 동작하는 경우가 많다. 단계별로 해답 후보를 하나씩 결정하면서 조건에 어긋나면 되돌아가는(Backtrack) 과정을 반복한다. 흔히 해결 대상이 되는 문제는 다음과 같다.</p>\n<ul>\n<li>모든 도시를 방문하는 경로를 찾아야 하는 <strong>여행하는 외판원 문제(TSP)</strong></li>\n<li>모든 빈 칸에 숫자를 채워야 하는 <strong>스도쿠(Sudoku)</strong></li>\n<li>특정 조건을 만족해야 하는 <strong>N-Queen 문제</strong> 등</li>\n</ul>\n<p>이 때, 백트래킹은 다음과 같은 절차로 진행된다.</p>\n<ol>\n<li>해답 후보를 하나 선택한다.</li>\n<li>현재 후보가 문제의 조건을 만족하지 않으면(가지치기) 뒤로 돌아간다.</li>\n<li>만족한다면 다음 단계로 넘어가 새로운 해답 후보를 선택한다.</li>\n<li>모든 단계를 처리하고 마지막까지 조건을 만족하면 전체 해가 된다.</li>\n</ol>\n<h2 id=\"여행-경로-찾기에-백트래킹-적용하기\" style=\"position:relative;\"><a href=\"#%EC%97%AC%ED%96%89-%EA%B2%BD%EB%A1%9C-%EC%B0%BE%EA%B8%B0%EC%97%90-%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"여행 경로 찾기에 백트래킹 적용하기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여행 경로 찾기에 백트래킹 적용하기</h2>\n<p>이번 예시에서 적용할 백트래킹 방식은 이전에 다루었던 문제를 변형해 본 것으로, 일반적으로 소개되는 백트래킹을 통한 TSP 문제 유형과는 다소 다를 수 있다.</p>\n<img alt=\"ui01\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/240117/ui01.png\">\n<p><a href=\"https://yhuj79.github.io/Algorithm/240117/\" target=\"_blank\" rel=\"noopener noreferrer\">최적의 여행 경로를 찾기 위한 최근접 이웃 알고리즘 솔루션</a></p>\n<p>최근접 이웃 알고리즘(Nearest Neighbor Algorithm)은 탐욕적인 방식으로 ‘가장 가까운 장소부터 찾아가는’ 전략을 택해 빠르게 경로를 구성했었다. 이 방식은 매우 심플하지만, 항상 전역적으로 최적인 해답을 보장하지는 않는다.</p>\n<p>백트래킹을 적용하면, 모든 경로를 탐색하면서 “더 이상 최적일 수 없는 지점”에서는 해당 분기를 중단하고 이전 단계로 돌아간다. 단순한 형태의 외판원 문제(TSP) 예시 코드를 살펴보면 다음과 같이 구성할 수 있다.</p>\n<img alt=\"distance-matrix\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/250416/distance-matrix.png\">\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 예시 데이터 (여기서는 위도/경도 대신 단순 거리로 가정)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distanceMatrix</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// A  B   C   D</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk7\">15</span><span class=\"mtk1\">, </span><span class=\"mtk7\">20</span><span class=\"mtk1\">], </span><span class=\"mtk5 mtki\">// A</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">35</span><span class=\"mtk1\">, </span><span class=\"mtk7\">25</span><span class=\"mtk1\">], </span><span class=\"mtk5 mtki\">// B</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span><span class=\"mtk7\">15</span><span class=\"mtk1\">, </span><span class=\"mtk7\">35</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">30</span><span class=\"mtk1\">], </span><span class=\"mtk5 mtki\">// C</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  [</span><span class=\"mtk7\">20</span><span class=\"mtk1\">, </span><span class=\"mtk7\">25</span><span class=\"mtk1\">, </span><span class=\"mtk7\">30</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">], </span><span class=\"mtk5 mtki\">// D</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">visited</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Array</span><span class=\"mtk1\">(</span><span class=\"mtk11\">distanceMatrix</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\">).</span><span class=\"mtk3\">fill</span><span class=\"mtk1\">(</span><span class=\"mtk7\">false</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">bestPath</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> [] </span><span class=\"mtk5 mtki\">// 최적 경로</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">minDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Infinity</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtki\">// 최단 거리, 가지치기를 위해 초기값은 일단 Infinity로 설정</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">backtrack</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">currentNode</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">depth</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">path</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">currentDistance</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// 모든 노드를 방문한 경우, 시작점으로 돌아온 거리까지 포함해 경로 갱신 여부 확인</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// 현재 도시(currentNode), 현재까지 방문한 도시 수(depth), 경로(path), 현재까지의 총 거리(currentDistance)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">depth</span><span class=\"mtk1\"> </span><span class=\"mtk8\">===</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distanceMatrix</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">totalDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">currentDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk4\">distanceMatrix</span><span class=\"mtk1\">[</span><span class=\"mtk4\">currentNode</span><span class=\"mtk1\">][</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">totalDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">minDistance</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">minDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">totalDistance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">bestPath</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> [...</span><span class=\"mtk4\">path</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">] </span><span class=\"mtk5 mtki\">// 순회를 마치고 시작점(0)으로 돌아옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">return</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distanceMatrix</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\">; </span><span class=\"mtk4\">nextNode</span><span class=\"mtk8\">++</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// 이미 방문한 노드는 생략</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">visited</span><span class=\"mtk1\">[</span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\">]) </span><span class=\"mtk9\">continue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// 이동 거리 계산</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nextDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">currentDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk4\">distanceMatrix</span><span class=\"mtk1\">[</span><span class=\"mtk4\">currentNode</span><span class=\"mtk1\">][</span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// 현재까지의 거리가 이미 기존 최소 거리보다 큰 경우, 더 갈 필요가 없으므로 가지치기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">nextDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&gt;=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">minDistance</span><span class=\"mtk1\">) </span><span class=\"mtk9\">continue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// 아직 최적 경로가 될 가능성이 남아 있다면, nextNode 방문 처리 후 재귀 호출</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">visited</span><span class=\"mtk1\">[</span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\">] </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">backtrack</span><span class=\"mtk1\">(</span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\">, </span><span class=\"mtk4\">depth</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, [...</span><span class=\"mtk4\">path</span><span class=\"mtk1\">, </span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\">], </span><span class=\"mtk4\">nextDistance</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">visited</span><span class=\"mtk1\">[</span><span class=\"mtk4\">nextNode</span><span class=\"mtk1\">] </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 시작점을 0(도시 A)이라고 가정하고, 방문 표시(visited[0] = true)를 해둔 뒤 시작</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">visited</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">backtrack</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, [</span><span class=\"mtk7\">0</span><span class=\"mtk1\">], </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;최적 경로:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">bestPath</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;최소 거리:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">minDistance</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>위 예시는 하나의 단순화된 스니펫으로, 실제로는 A, B, C, D 각 노드(도시)를 모두 방문한 뒤 다시 A로 돌아오는 최소 거리를 찾는 방식이다. 기본 아이디어는 다음과 같다.</p>\n<ol>\n<li>시작점(0번 노드)에서 출발한다.</li>\n<li>다음에 방문할 노드를 정하기 위해 모든 노드를 시도한다.</li>\n<li>이미 방문한 노드는 건너뛰며, 현재 누적 거리 + 이동 예정 거리가 기존에 찾은 최소 거리(minDistance)보다 커지면 가지치기(pruning)한다.</li>\n<li>모든 노드를 방문한 뒤, 다시 시작점으로 돌아오는 경로 거리를 확인하고, 더 작다면 최소 거리를 갱신한다.</li>\n</ol>\n<img alt=\"output\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/250416/output.png\">\n<p>A(0) → B(1) → D(3) → C(2) → A(0) 순으로 방문할 때 총 이동 거리가 80이 되며, 이것이 최단 경로로 확인된다.</p>\n<p>이처럼 백트래킹은 모든 가능한 경로를 시도하면서도, 불필요하게 긴 경로는 애초에 더 이상 진행하지 않는다. 최근접 이웃 알고리즘처럼 빠른 결정을 통해 빠르게 경로를 찾아내지는 못하지만, 전 탐색을 기반으로 더 정확한(최적에 가까운) 답을 찾을 수 있다는 장점이 있다.</p>\n<p>백트래킹은 문제의 모든 해답 후보를 탐색하면서도, 해당 경로가 최적 해가 될 수 없다고 판단되면(또는 문제 조건을 만족할 수 없다고 판단되면) 즉시 탐색을 중단하기 때문에, 완전 탐색보다는 훨씬 효율적이다. 그러나 문제의 크기가 커지면 탐색 공간이 매우 급격하게 늘어날 수 있으므로, 적절한 가지치기 기법을 추가로 적용하거나 다른 근사 알고리즘과 혼용해 사용하는 등의 전략이 필요할 것으로 보인다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%99%B8%ED%8C%90%EC%9B%90_%EB%AC%B8%EC%A0%9C\" target=\"_blank\" rel=\"noopener noreferrer\">외판원 문제 - 위키백과</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%ED%87%B4%EA%B0%81%EA%B2%80%EC%83%89\" target=\"_blank\" rel=\"noopener noreferrer\">퇴각검색 - 위키백과</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EA%B9%8A%EC%9D%B4_%EC%9A%B0%EC%84%A0_%ED%83%90%EC%83%89\" target=\"_blank\" rel=\"noopener noreferrer\">깊이 우선 탐색 - 위키백과</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EB%84%88%EB%B9%84_%EC%9A%B0%EC%84%A0_%ED%83%90%EC%83%89\" target=\"_blank\" rel=\"noopener noreferrer\">너비 우선 탐색 - 위키백과</a></p>\n<p><a href=\"https://youngdroidstudy.tistory.com/entry/%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9-%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9%EC%9D%98-%EC%84%A4%EB%AA%85%EA%B3%BC-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%A0%9C%ED%92%80%EC%9D%B4\" target=\"_blank\" rel=\"noopener noreferrer\">[백트래킹] 백트래킹의 설명과 간단한 예제풀이</a></p>\n<p><a href=\"https://goldenrabbit.co.kr/2023/12/29/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A9%EA%B2%A9%EC%9E%90-%EB%90%98%EA%B8%B0-%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9-1-%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9%EA%B3%BC-%EB%B0%B1/\" target=\"_blank\" rel=\"noopener noreferrer\">백트래킹– 1. 백트래킹과 백트래킹 알고리즘 개념</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Algorithm/250416/#%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9backtracking\">백트래킹(Backtracking)</a></li>\n<li><a href=\"/Algorithm/250416/#%EC%97%AC%ED%96%89-%EA%B2%BD%EB%A1%9C-%EC%B0%BE%EA%B8%B0%EC%97%90-%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">여행 경로 찾기에 백트래킹 적용하기</a></li>\n<li><a href=\"/Algorithm/250416/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2025년 04월 16일","title":"백트래킹 알고리즘을 활용한 최적 경로 탐색","tags":["Algorithm","Javascript"]}}},"pageContext":{"slug":"/Algorithm/250416/","previous":{"fields":{"slug":"/React/250306/"},"frontmatter":{"title":"React Error Boundary"}},"next":{"fields":{"slug":"/React/250615/"},"frontmatter":{"title":"Recoil - React를 위한 상태 관리 라이브러리"}}}},"staticQueryHashes":["1081905842","3911196313"]}
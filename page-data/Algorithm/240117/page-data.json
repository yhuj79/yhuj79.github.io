{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/240117/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"여행하는 외판원 문제(TSP : Traveling Salesman Problem)는 모든 도시들을 단 한 번만 방문하고 원래 출발한 도시로 돌아오는 최단 경로를 알아내는 문제이다. 이번 포스트는 다음과 유사한 문제를 최근접 이웃 알고리즘(Nearest Neighbor Algorithm)을 통해 구현했던 프로젝트에 대해 다루었다. 여행하는 외판원 문제 어느…","html":"<blockquote>\n<p>여행하는 외판원 문제(TSP : Traveling Salesman Problem)는 모든 도시들을 단 한 번만 방문하고 원래 출발한 도시로 돌아오는 최단 경로를 알아내는 문제이다. 이번 포스트는 다음과 유사한 문제를 최근접 이웃 알고리즘(Nearest Neighbor Algorithm)을 통해 구현했던 프로젝트에 대해 다루었다.</p>\n</blockquote>\n<h2 id=\"여행하는-외판원-문제\" style=\"position:relative;\"><a href=\"#%EC%97%AC%ED%96%89%ED%95%98%EB%8A%94-%EC%99%B8%ED%8C%90%EC%9B%90-%EB%AC%B8%EC%A0%9C\" aria-label=\"여행하는 외판원 문제 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여행하는 외판원 문제</h2>\n<p>어느 외판원이 자신의 사무실에서 출발하여 여러 곳의 방문지를 들려 판매 상담을 진행하려 한다. 모든 업무가 끝나면 사무실로 복귀한다. 일을 빠르게 마치려면 들려야 하는 방문지들을 최대한 효율적으로 빠르게 순회해야 할 것이다. 이것이 바로 <strong>외판원 문제(TSP : Traveling Salesman Problem)</strong>이다. 이 문제는 최단 경로를 구해야 하는 경우 NP-난해에 속하며, 흔히 계산 복잡도 이론에서 해를 구하기 어려운 문제의 대표적인 예로 많이 다룬다.</p>\n<h2 id=\"최근접-이웃-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EA%B7%BC%EC%A0%91-%EC%9D%B4%EC%9B%83-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"최근접 이웃 알고리즘 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최근접 이웃 알고리즘</h2>\n<p>외판원 순회의 경우 문제들 중에서도 어려운 편으로, 일반적인 외판원 문제에 대한 다항 시간 근사 알고리즘은 P=NP가 아닌 한 존재하지 않는다는 것이 밝혀져 있다. 표본의 수가 증가함에 따라 경우의 수가 기하급수적으로 늘어나 다항식 시간 내에 풀 수 있는 알고리즘이 없으므로 근사 해를 구하는 것이 일반적이다. 최적에 가까운 해를 구하는 데 사용할 방법 중 하나로 근사 알고리즘을 사용하는 것이 있다. 이러한 알고리즘은 최적에 가깝지만 반드시 최적은 아닌 솔루션을 제공한다. 잘 알려진 근사 알고리즘 중 하나는 <strong>최근접 이웃 알고리즘(Nearest Neighbor Algorithm)</strong>이다.</p>\n<p>이 방법은 탐욕 알고리즘(Greedy algorithm)에 기초한다. 최적해를 구하는 데 사용하는 근사적인 방법으로, 경우의 수를 결정하는 순간마다 최적의 방법을 선택해 나가며 크기가 큰 문제에서 작은 문제로 줄여나가는 하향식 방법으로 진행한다.</p>\n<h2 id=\"관광-경로-만들기\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EA%B4%91-%EA%B2%BD%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"관광 경로 만들기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관광 경로 만들기</h2>\n<img alt=\"ui01\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/240117/ui01.png\">\n<p>최근접 이웃 알고리즘을 적용해 볼 문제는 다음과 같다. 출발지와 도착지가 되어질 '숙소'가 주어지고, 방문하려 하는 여러 개의 '관광지'가 주어진다. 이를 여행할 최적의 경로로 만들면 된다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// dict 배열 예시</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dict</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">id</span><span class=\"mtk1\">: </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk5 mtki\">// 숙소</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">lat</span><span class=\"mtk1\">: </span><span class=\"mtk7\">48.86836127133744</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">lon</span><span class=\"mtk1\">: </span><span class=\"mtk7\">2.3268056623807514</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">id</span><span class=\"mtk1\">: </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk5 mtki\">// 관광지 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">lat</span><span class=\"mtk1\">: </span><span class=\"mtk7\">48.85836985229897</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">lon</span><span class=\"mtk1\">: </span><span class=\"mtk7\">2.2944622771397345</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">id</span><span class=\"mtk1\">: </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk5 mtki\">// 관광지 2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">lat</span><span class=\"mtk1\">: </span><span class=\"mtk7\">48.860632246610514</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">lon</span><span class=\"mtk1\">: </span><span class=\"mtk7\">2.3374079634624687</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">];</span></span></span></code></pre>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">startPoint</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">dict</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">remainingPoints</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dict</span><span class=\"mtk1\">.</span><span class=\"mtk3\">slice</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">nearestNeighbor</span><span class=\"mtk1\">(</span><span class=\"mtk4\">startPoint</span><span class=\"mtk1\">, </span><span class=\"mtk4\">remainingPoints</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">nearestNeighbor</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">start</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">points</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// 결과 배열 초기화 및 남은 지점 배열 생성</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">result</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk4\">start</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">remainingPoints</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> [...</span><span class=\"mtk4\">points</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">remainingPoints</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nearestIndex</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nearestDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">haversineDistance</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">start</span><span class=\"mtk1\">.</span><span class=\"mtk4\">lat</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">start</span><span class=\"mtk1\">.</span><span class=\"mtk4\">lon</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">remainingPoints</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">].</span><span class=\"mtk4\">lat</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">remainingPoints</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">].</span><span class=\"mtk4\">lon</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// 최근접 지점 찾기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">i</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">; </span><span class=\"mtk4\">i</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">remainingPoints</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\">; </span><span class=\"mtk4\">i</span><span class=\"mtk8\">++</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">haversineDistance</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">start</span><span class=\"mtk1\">.</span><span class=\"mtk4\">lat</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">start</span><span class=\"mtk1\">.</span><span class=\"mtk4\">lon</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">remainingPoints</span><span class=\"mtk1\">[</span><span class=\"mtk4\">i</span><span class=\"mtk1\">].</span><span class=\"mtk4\">lat</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">remainingPoints</span><span class=\"mtk1\">[</span><span class=\"mtk4\">i</span><span class=\"mtk1\">].</span><span class=\"mtk4\">lon</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">distance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">nearestDistance</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">nearestIndex</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">i</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">nearestDistance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">distance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5 mtki\">// 최근접 이웃을 다음 출발점으로 설정하고 결과에 추가</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">start</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">remainingPoints</span><span class=\"mtk1\">[</span><span class=\"mtk4\">nearestIndex</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">result</span><span class=\"mtk1\">.</span><span class=\"mtk3\">push</span><span class=\"mtk1\">(</span><span class=\"mtk4\">start</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">remainingPoints</span><span class=\"mtk1\">.</span><span class=\"mtk3\">splice</span><span class=\"mtk1\">(</span><span class=\"mtk4\">nearestIndex</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">result</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 모든 지점 설정 완료까지 반복</span></span></span></code></pre>\n<p>start, points 파라미터는 숙소, 관광지의 id 값과 위도, 경도 값을 받는다. startPoint로 배열의 첫 번째 요소를 지정, remainingPoints에 거리를 비교할 나머지 요소들을 지정하고, 최근접 지점을 찾아내는 nearestNeighbor 함수가 startPoint에서 갈 곳을 선택한다. 이를 반복해 나가며 경로를 구성하는 원리이다.</p>\n<h2 id=\"haversine-formula\" style=\"position:relative;\"><a href=\"#haversine-formula\" aria-label=\"haversine formula permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Haversine Formula</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// Haversine Formula : 경도와 위도가 주어진 두 지점 사이의 대원 거리를 계산</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">haversineDistance</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">lat1</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">lon1</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">lat2</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">lon2</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// 지구 반경 상수 (단위: km)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">earthRadius</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">6371</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// 각도를 라디안으로 변환</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dLat</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">toRadians</span><span class=\"mtk1\">(</span><span class=\"mtk4\">lat2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk4\">lat1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dLon</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">toRadians</span><span class=\"mtk1\">(</span><span class=\"mtk4\">lon2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk4\">lon1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// Haversine 공식 계산</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">a</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">sin</span><span class=\"mtk1\">(</span><span class=\"mtk4\">dLat</span><span class=\"mtk1\"> </span><span class=\"mtk8\">/</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">) </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">sin</span><span class=\"mtk1\">(</span><span class=\"mtk4\">dLat</span><span class=\"mtk1\"> </span><span class=\"mtk8\">/</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">) </span><span class=\"mtk8\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">cos</span><span class=\"mtk1\">(</span><span class=\"mtk3\">toRadians</span><span class=\"mtk1\">(</span><span class=\"mtk4\">lat1</span><span class=\"mtk1\">)) </span><span class=\"mtk8\">*</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">cos</span><span class=\"mtk1\">(</span><span class=\"mtk3\">toRadians</span><span class=\"mtk1\">(</span><span class=\"mtk4\">lat2</span><span class=\"mtk1\">)) </span><span class=\"mtk8\">*</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">sin</span><span class=\"mtk1\">(</span><span class=\"mtk4\">dLon</span><span class=\"mtk1\"> </span><span class=\"mtk8\">/</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">) </span><span class=\"mtk8\">*</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">sin</span><span class=\"mtk1\">(</span><span class=\"mtk4\">dLon</span><span class=\"mtk1\"> </span><span class=\"mtk8\">/</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">c</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">atan2</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">sqrt</span><span class=\"mtk1\">(</span><span class=\"mtk4\">a</span><span class=\"mtk1\">), </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk8\">sqrt</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk8\">-</span><span class=\"mtk1\"> </span><span class=\"mtk4\">a</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5 mtki\">// 대원 거리 계산 및 소수점 둘째 자리까지 반환</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distance</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">earthRadius</span><span class=\"mtk1\"> </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk4\">c</span><span class=\"mtk1\">).</span><span class=\"mtk3\">toFixed</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">distance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 각도를 라디안으로 변환하는 함수</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">toRadians</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">degrees</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">degrees</span><span class=\"mtk1\"> </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk7\">PI</span><span class=\"mtk1\">) </span><span class=\"mtk8\">/</span><span class=\"mtk1\"> </span><span class=\"mtk7\">180</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong>하버사인 공식(Haversine Formula)</strong>은 두 지점 사이의 구면적 거리(원형 지구 상에서의 거리)를 구하는 데 사용되는 공식이며 지구의 구면성을 고려하여 위도와 경도를 기준으로 두 지점 사이의 최단 거리를 구할 때 주로 사용된다. 이를 통해 두 지점 간의 거리를 계산하여 최근접 지점을 비교하는 데 사용하였다.</p>\n<p>이 공식은 일반적인 사용에서는 큰 무리는 없을 정도이지만, 실제 지구는 적도 쪽이 좀 더 길쭉한 타원형이기 때문에 완벽히 정확한 값이라고 할 수는 없다. 또한 이러한 방법은 두 좌표의 직선 거리를 구하게 되기 때문에 실제 도로 주행을 했을 때의 길이와 차이가 발생한다. 가급적이면 주행할 거리 간의 비교를 통한 최근접 이웃 연산이 더욱 정확할 것이다. 납득할 수 있는 효율적인 경로를 만들어 볼 수는 있었지만, 보다 더 최적에 가까운 값을 찾기 위해서는 다른 방법을 찾아봐야 할 것이다.</p>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%99%B8%ED%8C%90%EC%9B%90_%EB%AC%B8%EC%A0%9C\">외판원 문제 - 위키백과</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/NP-%EB%82%9C%ED%95%B4\">NP-난해 - 위키백과</a></p>\n<p><a href=\"https://blog.devgenius.io/traveling-salesman-problem-nearest-neighbor-algorithm-solution-e78399d0ab0c\">Traveling Salesman Problem: Nearest Neighbor Algorithm Solution</a></p>\n<p><a href=\"https://gwnuysw.github.io/jekyll/update/2018/04/06/algorithm.html\">알고리즘 여행하는 외판원 문제 | 意志</a></p>\n<p><a href=\"https://kayuse88.github.io/haversine/\">최단거리 구하기, 하버사인 공식(Haversine Formula) | 기술 저장소</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Algorithm/240117/#%EC%97%AC%ED%96%89%ED%95%98%EB%8A%94-%EC%99%B8%ED%8C%90%EC%9B%90-%EB%AC%B8%EC%A0%9C\">여행하는 외판원 문제</a></li>\n<li><a href=\"/Algorithm/240117/#%EC%B5%9C%EA%B7%BC%EC%A0%91-%EC%9D%B4%EC%9B%83-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">최근접 이웃 알고리즘</a></li>\n<li><a href=\"/Algorithm/240117/#%EA%B4%80%EA%B4%91-%EA%B2%BD%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">관광 경로 만들기</a></li>\n<li><a href=\"/Algorithm/240117/#haversine-formula\">Haversine Formula</a></li>\n<li><a href=\"/Algorithm/240117/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2024년 01월 17일","title":"최적의 여행 경로를 찾기 위한 최근접 이웃 알고리즘 솔루션","tags":["Algorithm","Javascript"]}}},"pageContext":{"slug":"/Algorithm/240117/","previous":{"fields":{"slug":"/React Native/231018/"},"frontmatter":{"title":"React Native 내 위치 정보 얻기 (Geolocation Service)"}},"next":{"fields":{"slug":"/Computer Science/240207/"},"frontmatter":{"title":"소프트웨어 설계 주요 내용"}}}},"staticQueryHashes":["1081905842","3911196313"]}
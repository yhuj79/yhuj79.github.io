{"componentChunkName":"component---src-templates-blog-post-js","path":"/자료구조/220929/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"비원시 자료구조이며 데이터를 선형적으로 구성하는 스택(Stack), 큐(Queue)를 javascript pop, push, shift 메서드로 구현해보자. 비원시 자료구조, 선형적 자료구조 스택(Stack) 과 큐(Queue) 는 비원시 자료구조(Non-Primitive Data Structure) 이며, 선형적 자료구조(Linear Structure)…","html":"<blockquote>\n<p>비원시 자료구조이며 데이터를 선형적으로 구성하는 스택(Stack), 큐(Queue)를 javascript pop, push, shift 메서드로 구현해보자.</p>\n</blockquote>\n<h2 id=\"비원시-자료구조-선형적-자료구조\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EC%9B%90%EC%8B%9C-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%84%A0%ED%98%95%EC%A0%81-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\" aria-label=\"비원시 자료구조 선형적 자료구조 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비원시 자료구조, 선형적 자료구조</h2>\n<p><strong>스택(Stack)</strong> 과 <strong>큐(Queue)</strong> 는 <strong>비원시 자료구조(Non-Primitive Data Structure)</strong> 이며, <strong>선형적 자료구조(Linear Structure)</strong> 이다. 먼저 이것이 무엇일까?</p>\n<p>원시 자료구조가 정수형(Integer), 실수형(Float), 문자형(Character)과 같은 자료 구성의 기본 단위라면, 비원시 자료구조는 Stack, Queue, Linked List처럼 <strong>한 번에 여러 값을 가지며 고정되지 않은 동적 공간을 사용하는 데이터 구조 유형</strong>이다. 컴퓨터 과학에서는 자료 연산에 구체적인 방법을 명시하지 않는다는 부분에서 <strong>추상 자료형(Abstact Data Type)</strong> 이라고도 한다.</p>\n<p>또한 비원시 자료구조는 선형 구조와 비선형 구조로 분류된다.</p>\n<ul>\n<li>\n<p><strong>선형 구조(linear)</strong> : 데이터 구조의 순차 유형으로, 1:1의 관계를 가짐.</p>\n<ul>\n<li>ex ) Stack, Queue, Linked List, Deque</li>\n</ul>\n</li>\n<li>\n<p><strong>비선형 구조(Nonlinear)</strong> : 무작위 자료구조 형태이며, 데이터가 1:n 또는 n:n 관계를 가짐.</p>\n<ul>\n<li>ex ) Tree, Graph</li>\n</ul>\n</li>\n</ul>\n<p>이 중에서 <strong>Stack</strong>과 <strong>Queue</strong>를 javascript로 간단하게 구현해 보았다.</p>\n<h2 id=\"stack\" style=\"position:relative;\"><a href=\"#stack\" aria-label=\"stack permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack</h2>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1Djln9elxOtKCVyaSQyEdoT9qBbcd8eLF\" alt=\"stack1\"></p>\n<p>책을 쌓는 것처럼 차곡차곡 쌓아 올린 형태의 자료구조를 <strong>Stack</strong>이라고 한다.</p>\n<p>한 쪽 끝에서만 자료를 넣고 뺄 수 있으므로 <strong>Last In First Out(LIFO)</strong> 형식이라고 부른다.\n따라서 마지막으로 들어온 값, 나중에 넣은 값이 먼저 나오게 된다.</p>\n<p>Stack은 <code>push()</code>와 <code>pop()</code>을 사용하여 javascript로 쉽게 구현할 수 있는데,</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// stack</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">stack</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> []</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">addStack</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">item</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">stack</span><span class=\"mtk1\">.</span><span class=\"mtk3\">push</span><span class=\"mtk1\">(</span><span class=\"mtk4\">item</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">delStack</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">stack</span><span class=\"mtk1\">.</span><span class=\"mtk3\">pop</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addStack</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addStack</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addStack</span><span class=\"mtk1\">(</span><span class=\"mtk7\">3</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addStack</span><span class=\"mtk1\">(</span><span class=\"mtk7\">4</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">delStack</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk6\">`stack = </span><span class=\"mtk9\">${</span><span class=\"mtk4\">stack</span><span class=\"mtk9\">}</span><span class=\"mtk6\">`</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>javascript의 <code>pop()</code> 함수는 배열의 가장 맨 끝 값을 제거해 준다.<br>\naddStack으로 값을 추가, delStack은 가장 마지막에 push되었던 값 4를 제거하며 최종적으로 1,2,3이 남아있는 것을 볼 수 있다.</p>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1k8afn95nNm6lndVu5fn2EtwHXiwf9f_f\" alt=\"stack2\"></p>\n<p>Stack의 LIFO 원리는 이전의 작업 내용을 저장해 둘 필요한 경우에 활용 될 수 있다.</p>\n<ul>\n<li><strong>웹 브라우저 방문 기록</strong> - 가장 나중에 열린 페이지부터 방문 리스트에 표시</li>\n<li><strong>역순 문자열 만들기</strong> - 가장 나중에 입력된 문자부터 출력</li>\n<li><strong>실행 취소 (undo)</strong> - 가장 나중에 실행된 것부터 취소</li>\n<li><strong>재귀 알고리즘</strong> - stack에 담아 두었던 재귀 함수를 backtrack 시 임시 데이터를 빼주는 형식</li>\n<li><strong>후위 표기법 계산</strong> - postfix notation</li>\n<li><strong>수식의 괄호 검사</strong> - 연산자 우선순위 표현을 위한 괄호 검사</li>\n</ul>\n<h2 id=\"queue\" style=\"position:relative;\"><a href=\"#queue\" aria-label=\"queue permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Queue</h2>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1ejqChP2Y_d0dyhIglOMnZEvccX2KmZQI\" alt=\"queue1\"></p>\n<p><strong>Queue</strong>는 한쪽으로 데이터를 넣고 다른 쪽으로 데이터를 가져오는 구조이다.</p>\n<p>맨 처음 입력된 데이터가 먼저 나오게 된다. <strong>First In First Out(FIFO), Last In Last Out(LILO)</strong> 형식으로 불린다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">queue</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> []</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">addQueue</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">item</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk3\">push</span><span class=\"mtk1\">(</span><span class=\"mtk4\">item</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">delQueue</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk3\">shift</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addQueue</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addQueue</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addQueue</span><span class=\"mtk1\">(</span><span class=\"mtk7\">3</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">addQueue</span><span class=\"mtk1\">(</span><span class=\"mtk7\">4</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">delQueue</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk6\">`queue = </span><span class=\"mtk9\">${</span><span class=\"mtk4\">queue</span><span class=\"mtk9\">}</span><span class=\"mtk6\">`</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1ipsBu2wtEIdPHIUwaNHGNO1KYb6Xoshl\" alt=\"queue2\"></p>\n<p>javascript의 <code>shift()</code> 함수는 배열의 가장 맨 앞 값을 제거해 준다. 결과는 2, 3, 4만 남게 된다.</p>\n<p>실제 Queue의 활용 예시는 다음과 같다.</p>\n<ul>\n<li><strong>CPU, 디스크 스케줄링</strong></li>\n<li><strong>너비 우선 탐색 (BFS, Breadth-First Search)</strong> - 가까운 곳을 먼저, 먼 곳을 나중에 방문하는 순회 방식</li>\n<li><strong>프로세스 관리</strong></li>\n<li><strong>비동기 전송</strong> - 자료 일시 저장 시</li>\n<li><strong>캐시 (Cache)</strong></li>\n</ul>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://www.javatpoint.com/primitive-vs-non-primitive-data-structure\">Primitive vs non-primitive data structure | What's the difference? - javatpoint</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Abstract_data_type\">Abstract data type - Wikipedia</a></p>\n<p><a href=\"https://www.booksr.co.kr/product/9788970509716/\">자료구조 (개정3판) | 생능출판사</a></p>\n<p><a href=\"https://yoongrammer.tistory.com/45\">[자료구조] 스택 (Stack)</a></p>\n<p><a href=\"https://helloworldjavascript.net/pages/282-data-structures.html\">큐, 스택, 트리 | JavaScript로 만나는 세상</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/220929/#%EB%B9%84%EC%9B%90%EC%8B%9C-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%84%A0%ED%98%95%EC%A0%81-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\">비원시 자료구조, 선형적 자료구조</a></li>\n<li><a href=\"/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/220929/#stack\">Stack</a></li>\n<li><a href=\"/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/220929/#queue\">Queue</a></li>\n<li><a href=\"/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/220929/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 09월 29일","title":"Stack, Queue","tags":["자료구조","Javascript","Stack","Queue"]}}},"pageContext":{"slug":"/자료구조/220929/","previous":{"fields":{"slug":"/Swift/220925/"},"frontmatter":{"title":"딕셔너리(Dictionary)"}},"next":{"fields":{"slug":"/네트워크/221004/"},"frontmatter":{"title":"HTTP 헤더 분석"}}}},"staticQueryHashes":["1081905842","3911196313"]}
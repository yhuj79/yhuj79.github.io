{"componentChunkName":"component---src-templates-blog-post-js","path":"/Jest/221022/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"많이 사용되고 있는 테스트 도구인 Jest는 Zero Configuration 철학을 가지고 있어 별도의 설정 없이 빠르게 테스트 케이스를 작성할 수 있다. Jest란 무엇인가? Jest는 React를 만든 Facebook에서 개발한 테스팅 프레임워크(Testing Framework)이다. Babel, TypeScript, Node, React, Angu…","html":"<blockquote>\n<p>많이 사용되고 있는 테스트 도구인 Jest는 Zero Configuration 철학을 가지고 있어 별도의 설정 없이 빠르게 테스트 케이스를 작성할 수 있다.</p>\n</blockquote>\n<h2>Jest란 무엇인가?</h2>\n<p><strong>Jest</strong>는 React를 만든 Facebook에서 개발한 테스팅 프레임워크(Testing Framework)이다. Babel, TypeScript, Node, React, Angular, Vue 등을 사용하는 프로젝트에서 작동하며, 프로젝트 내의 별도 설정이 필요 없이 바로 시작할 수 있는 Zero Configuration 철학을 가지고 있다. 테스트 코드의 모양이 직관적이고 문서화가 잘 이루어져 있어 많이 활용되고 있다.</p>\n<h2>간단한 테스트 해보기</h2>\n<p>간단히 사용해보기 위해 작은 프로젝트 디렉터리를 만들고 Jest를 설치해 보았다.</p>\n<pre><code class=\"language-bash\">$ npm init -y   # default package.json 생성\n\nWrote to ~/jest-tutorial/package.json:\n{\n  \"name\": \"jest-tutorial\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n> npm install jest --save-dev   # jest 설치\n</code></pre>\n<p>Jest를 설치한 후 <code>package.json</code>의 test scripts를 jest로 수정한다.</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"jest-tutorial\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"jest\" // 다음과 같이 수정\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"jest\": \"^29.2.1\"\n  }\n}\n</code></pre>\n<p>디렉터리에 테스트 대상이 될 함수 <code>funcAdd.js</code>를 생성했다.</p>\n<pre><code class=\"language-javascript\">const funcAdd = {\n  // 두 개의 인수를 받아 그 합을 리턴\n  add: (num1, num2) => num1 + num2,\n}\n\nmodule.exports = funcAdd // 테스트 파일에서 사용할 수 있도록 내보내기\n</code></pre>\n<p>함수 파일 작성을 마쳤다면 이제 테스트 파일을 작성할 차례다. <code>funcAdd.test.js</code>를 만들고 테스트 코드를 다음과 같이 작성하였다.</p>\n<pre><code class=\"language-javascript\">const funcAdd = require(\"./funcAdd\") // funcAdd 불러오기\n\ntest(\"1 = 1\", () => {\n  expect(1).toBe(1) // expect: 검증값 , toBe: 기대값\n})\n\ntest(\"2 + 3 = 5\", () => {\n  expect(funcAdd.add(2, 3)).toBe(5) // funcAdd.add 성공 케이스\n})\n\ntest(\"3 + 3 = 5\", () => {\n  expect(funcAdd.add(3, 3)).toBe(5) // funcAdd.add 실패 케이스\n})\n</code></pre>\n<p><code>npm test</code>를 실행하여 테스트 결과를 확인해보자. <code>npm test</code>는 프로젝트 내에서 <code>~.test.js</code>와 같은 형식으로 되어 있거나, <code>__tests__</code> 디렉터리 안에 있는 모든 파일을 테스트 파일로 인식하고 테스트를 실행시킨다.</p>\n<pre><code class=\"language-bash\">$ npm test\n\n> jest-tutorial@1.0.0 test\n> jest\n\n FAIL  ./funcAdd.test.js\n  ✓ 1 => 1 (1 ms)\n  ✓ 2 + 3 = 5\n  ✕ 3 + 3 = 5 (1 ms)\n\n  ● 3 + 3 = 5\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 5\n    Received: 6\n\n      10 |\n      11 | test(\"3 + 3 = 5\", () => {\n    > 12 |   expect(funcAdd.add(3, 3)).toBe(5);\n         |                             ^\n      13 | });\n      14 |\n\n      at Object.toBe (funcAdd.test.js:12:29)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 2 passed, 3 total\nSnapshots:   0 total\nTime:        0.189 s\nRan all test suites.\n</code></pre>\n<p>아래 <code>Tests</code>에서 총 3개 중 2개 성공, 1개 실패했음을 확인할 수 있다.</p>\n<p>세 번째 테스트 함수를 아래처럼 변경하여 테스트를 진행해볼 수도 있다.</p>\n<pre><code class=\"language-javascript\">test(\"3 + 3 ≠ 5\", () => {\n  expect(funcAdd.add(3, 3)).not.toBe(5) // not을 사용\n})\n</code></pre>\n<pre><code class=\"language-bash\">$ npm test\n\n> jest-tutorial@1.0.0 test\n> jest\n\n PASS  ./funcAdd.test.js\n  ✓ 1 => 1 (1 ms)\n  ✓ 2 + 3 = 5 (1 ms)\n  ✓ 3 + 3 ≠ 5\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        0.166 s, estimated 1 s\nRan all test suites.\n</code></pre>\n<p>이처럼 Jest는 여러가지 방법으로 값을 테스트할 수 있게 다양한 <code>matchers</code>를 지원한다.</p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://jestjs.io/docs/tutorial-async\" target=\"_blank\" rel=\"noopener noreferrer\">An Async Example · Jest</a></p>\n<p><a href=\"https://www.daleseo.com/jest-basic/\" target=\"_blank\" rel=\"noopener noreferrer\">Jest로 기본적인 테스트 작성하기 | Engineering Blog by Dale Seo</a></p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLZKTXPmaJk8L1xCg_1cRjL5huINlP2JKt\" target=\"_blank\" rel=\"noopener noreferrer\">Jest 강좌 | 코딩앙마</a></p>\n<p><a href=\"https://lacommune.tistory.com/160\" target=\"_blank\" rel=\"noopener noreferrer\">commune :: NPM 사용법 : npm init 다운받기/ npm install 모듈설치</a></p>\n<p><a href=\"https://m.blog.naver.com/ckdgh930314/221801015725\" target=\"_blank\" rel=\"noopener noreferrer\">npm init이란? : 네이버 블로그</a></p>","tableOfContents":"<ul>\n<li><a href=\"/Jest/221022/#jest%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">Jest란 무엇인가?</a></li>\n<li><a href=\"/Jest/221022/#%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EB%B3%B4%EA%B8%B0\">간단한 테스트 해보기</a></li>\n<li><a href=\"/Jest/221022/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 10월 22일","title":"테스팅 라이브러리 Jest 사용하기","tags":["Jest","Javascript","Testing"]}}},"pageContext":{"slug":"/Jest/221022/","previous":{"fields":{"slug":"/Javascript/221013/"},"frontmatter":{"title":"동적 타입 언어"}},"next":{"fields":{"slug":"/React/221101/"},"frontmatter":{"title":"로컬 서버 외부에서 접속하기"}}}},"staticQueryHashes":["1081905842","3911196313"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/Jest/221129/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"RTL(React Testing Library)은 React 테스팅을 위해 React App에 내장되어 있는 시스템이다. RTL에는 Jest가 포함되어 있어 이를 통해 기능 테스트를 진행할 수 있다. Jest 컴포넌트 테스트 테스팅 라이브러리 Jest 사용하기 지난 Jest 포스팅에 이어서 Jest를 사용하여 React 프로젝트를 테스트해 보기로 했다. …","html":"<blockquote>\n<p>RTL(React Testing Library)은 React 테스팅을 위해 React App에 내장되어 있는 시스템이다. RTL에는 Jest가 포함되어 있어 이를 통해 기능 테스트를 진행할 수 있다.</p>\n</blockquote>\n<h2>Jest 컴포넌트 테스트</h2>\n<p><a href=\"http://localhost:8000/blog/221022/\" target=\"_blank\" rel=\"noopener noreferrer\">테스팅 라이브러리 Jest 사용하기</a></p>\n<p>지난 Jest 포스팅에 이어서 Jest를 사용하여 React 프로젝트를 테스트해 보기로 했다.</p>\n<p>먼저 <code>create react-app</code>으로 테스트를 진행할 React 프로젝트를 생성했다.</p>\n<pre><code class=\"language-bash\">yarn create react-app jest-tutorial\n</code></pre>\n<p>React는 기본 테스트 도구로 Jest를 사용하기 때문에 별도 설치 없이 사용할 수 있고, src 디렉터리에 App.test.js가 존재하는 걸 확인할 수 있다. learn react 링크의 렌더링을 테스트하는 코드가 작성되어 있다.</p>\n<pre><code class=\"language-javascript\">import { render, screen } from \"@testing-library/react\"\nimport App from \"./App\"\n\ntest(\"renders learn react link\", () => {\n  render(&#x3C;App />)\n  const linkElement = screen.getByText(/learn react/i)\n  expect(linkElement).toBeInTheDocument()\n})\n</code></pre>\n<p><code>yarn test</code>를 해보면 다음과 같이 결과가 출력된다.</p>\n<pre><code class=\"language-bash\">$ yarn test\nyarn run v1.22.18\n$ react-scripts test\n PASS  src/App.test.js\n  ✓ renders learn react link (16 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.785 s\nRan all test suites related to changed files.\n</code></pre>\n<p>다른 컴포넌트에서 테스트를 진행하기 위해 기존 테스트 코드를 삭제하고, Container 컴포넌트와 Container.test.js를 작성했다.</p>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/221129/jestsrc.png\" alt=\"jestsrc\"></p>\n<pre><code class=\"language-javascript\">// App.js\n\nimport Container from \"./Container\"\n\nconst id = null\n\nfunction App() {\n  return (\n    &#x3C;div>\n      &#x3C;Container id={id} />\n    &#x3C;/div>\n  )\n}\n\nexport default App\n</code></pre>\n<pre><code class=\"language-javascript\">// Container.js\n\n// 삼항 연산자로 id 값이 있는 경우 id를 출력, 그렇지 않으면 h1 태그 출력\nfunction Container({ id }) {\n  return id ? &#x3C;h1>{id}&#x3C;/h1> : &#x3C;h1>id가 발견되지 않습니다.&#x3C;/h1>\n}\n\nexport default Container\n</code></pre>\n<pre><code class=\"language-javascript\">// Container.test.js\n\nimport { render, screen } from \"@testing-library/react\"\nimport Container from \"./Container\"\n\nconst id = 123\n\n// id 값이 있는지 검사하는 테스트\ntest(\"id 값 테스트\", () => {\n  const el = &#x3C;Container id={id} />\n  expect(el).toMatchSnapshot()\n})\n</code></pre>\n<pre><code class=\"language-bash\"># 검사 성공\n PASS  src/Container.test.js\n  ✓ id 값 테스트 (1 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   1 passed, 1 total\nTime:        0.229 s, estimated 1 s\nRan all test suites.\n</code></pre>\n<h2>SnapShot</h2>\n<p>여러 가지 테스트를 추가할 수 있는데, id 값 확인과 함께 id가 123이 맞는지 확인하는 테스트도 해볼 수 있다.</p>\n<pre><code class=\"language-javascript\">import { render, screen } from \"@testing-library/react\"\nimport Container from \"./Container\"\n\nconst id = 123\n\ntest(\"id 값 테스트\", () => {\n  const el = &#x3C;Container id={id} />\n  expect(el).toMatchSnapshot()\n})\n\ntest(\"id가 123인지 검사\", () => {\n  render(&#x3C;Container id={id} />)\n  const containerElement = screen.getByText(/123/i)\n  expect(containerElement).toBeInTheDocument()\n})\n</code></pre>\n<pre><code class=\"language-bash\"># if id = 123\n PASS  src/Container.test.js\n  ✓ id 값 테스트 (2 ms)\n  ✓ id가 123인지 검사 (12 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   1 passed, 1 total\nTime:        0.263 s, estimated 1 s\nRan all test suites related to changed files.\n\n# if id = 200\nFAIL  src/Container.test.js\n  ✕ id 값 테스트 (3 ms)\n  ✕ id가 123인지 검사 (13 ms)\n\n  ● id 값 테스트\n\n    expect(received).toMatchSnapshot()\n\n    Snapshot name: `id 값 테스트 1`\n\n    - Snapshot  - 1\n    + Received  + 1\n\n      &#x3C;Container\n    -   id={123}\n    +   id={200}\n      />\n\n       6 | test(\"id 값 테스트\", () => {\n       7 |   const el = &#x3C;Container id={id} />;\n    >  8 |   expect(el).toMatchSnapshot();\n         |              ^\n       9 | });\n      10 |\n      11 | test(\"id가 123인지 검사\", () => {\n\n      at Object.&#x3C;anonymous> (src/Container.test.js:8:14)\n\n  ● id가 123인지 검사\n\n    TestingLibraryElementError: Unable to find an element with the text: /123/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.\n\n    Ignored nodes: comments, script, style\n    &#x3C;body>\n      &#x3C;div>\n        &#x3C;h1>\n          200\n        &#x3C;/h1>\n      &#x3C;/div>\n    &#x3C;/body>\n\n      11 | test(\"id가 123인지 검사\", () => {\n      12 |   render(&#x3C;Container id={id} />);\n    > 13 |   const containerElement = screen.getByText(/123/i);\n         |                                   ^\n      14 |   expect(containerElement).toBeInTheDocument();\n      15 | });\n      16 |\n\n      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:40:19)\n      at Object.&#x3C;anonymous> (src/Container.test.js:13:35)\n\n › 1 snapshot failed.\nSnapshot Summary\n › 1 snapshot failed from 1 test suite. Inspect your code changes or press `u` to update them.\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 2 total\nSnapshots:   1 failed, 1 total\nTime:        0.47 s, estimated 1 s\nRan all test suites related to changed files.\n</code></pre>\n<p>두 번째 테스트에서 id 값 테스트가 값 200이 입력되었음에도 실패하게 되는 이유는 첫 번째 테스트에서 Snapshot이 123으로 입력되었기 때문이다. src 디렉터리에 <strong>snapshots</strong>가 생성되어 있는 것을 볼 수 있는데, 이 곳에 스냅샷이 업데이트 되어 있다.</p>\n<pre><code class=\"language-snap\">// Container.test.js.snap\n\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`id 값 테스트 1`] = `\n&#x3C;Container\n  id={123}\n/>\n`;\n</code></pre>\n<p>id 값이 123으로 기록되었기 때문에 이외에 다른 id 값이 입력되면 실패했음을 알린 것이다.</p>\n<pre><code class=\"language-bash\"> › 1 snapshot failed from 1 test suite. Inspect your code changes or press `u` to update them.\n</code></pre>\n<p>따라서 새로 입력한 값을 스냅샷에 업데이트 하고 싶으면 u 키를 눌러 반영하거나, 계속 테스트를 진행하게끔 선택할 수 있다.</p>\n<p>사용자의 판단에 따라 스냅샷을 업데이트하며 테스트를 진행하면 될 것 같다.</p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://jestjs.io/docs/tutorial-async\" target=\"_blank\" rel=\"noopener noreferrer\">An Async Example · Jest</a></p>\n<p><a href=\"https://velog.io/@mokyoungg/Jest-Jest%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-React-Code-Test-%EA%B8%B0%EC%B4%88\" target=\"_blank\" rel=\"noopener noreferrer\">[Jest] Jest 기초</a></p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLZKTXPmaJk8L1xCg_1cRjL5huINlP2JKt\" target=\"_blank\" rel=\"noopener noreferrer\">Jest 강좌 | 코딩앙마</a></p>\n<p><a href=\"https://tecoble.techcourse.co.kr/post/2021-10-22-react-testing-library/\" target=\"_blank\" rel=\"noopener noreferrer\">초심자를 위한 React Testing Library</a></p>\n<p><a href=\"https://velog.io/@velopert/react-testing-library#queries\" target=\"_blank\" rel=\"noopener noreferrer\">react-testing-library 를 사용한 리액트 컴포넌트 테스트</a></p>","tableOfContents":"<ul>\n<li><a href=\"/Jest/221129/#jest-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\">Jest 컴포넌트 테스트</a></li>\n<li><a href=\"/Jest/221129/#snapshot\">SnapShot</a></li>\n<li><a href=\"/Jest/221129/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 11월 29일","title":"Jest React 컴포넌트/스냅샷 테스트","tags":["Jest","React","Testing"]}}},"pageContext":{"slug":"/Jest/221129/","previous":{"fields":{"slug":"/React/221101/"},"frontmatter":{"title":"로컬 서버 외부에서 접속하기"}},"next":{"fields":{"slug":"/Next/221213/"},"frontmatter":{"title":"Next.js REST API 세팅하기 (with Prisma, PlanetScale)"}}}},"staticQueryHashes":["1081905842","3911196313"]}
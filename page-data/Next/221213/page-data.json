{"componentChunkName":"component---src-templates-blog-post-js","path":"/Next/221213/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"Next.js, Prisma, PlanetScale을 통해 초기 개발 환경 구축, Axios로 간단한 get, post 테스트 Create Next App Next.js는 React 기반의, React를 품은 프레임워크이다. SSR (Server Side Rendering) 을 지원하여 SEO (Search Engine Optimize) 에 수월하다. 소…","html":"<blockquote>\n<p>Next.js, Prisma, PlanetScale을 통해 초기 개발 환경 구축, Axios로 간단한 get, post 테스트</p>\n</blockquote>\n<h2 id=\"create-next-app\" style=\"position:relative;\"><a href=\"#create-next-app\" aria-label=\"create next app permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Next App</h2>\n<p><strong>Next.js</strong>는 React 기반의, React를 품은 프레임워크이다. <strong>SSR (Server Side Rendering)</strong> 을 지원하여 <strong>SEO (Search Engine Optimize)</strong> 에 수월하다. 소스코드 안에 HTML이 남아있는 상태로 렌더링되기 때문에 네트워크 지연과 같은 상황에도 최소한 텅 빈 화면을 볼 일은 없을 것이다.</p>\n<p>Next App은 기존 React에서 사용했던 Boilerplate와 유사한 명령어로 설치할 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ yarn create next-app 프로젝트명</span></span></span></code></pre>\n<h2 id=\"planetscale\" style=\"position:relative;\"><a href=\"#planetscale\" aria-label=\"planetscale permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Planetscale</h2>\n<p><strong>Planetscale</strong>은 비테스(Vitess) 기반의 Mysql을 호환하는 DB로, 동시 연결도 거의 무제한에 가깝게 할 수 있다. 초기에 별도 결제 수단 등록 없이 무료로 사용 가능하며, 요금제 한도 초과 시 스케일러 요금제로 전환할 수 있다.</p>\n<p>회원 가입 후 DB 생성을 진행. (Git으로 Login 가능)</p>\n<table>\n    <tbody><tr>\n        <td>\n            <img alt=\"pscale1\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/pscale1.png\">\n        </td>\n        <td>\n            <img alt=\"pscale2\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/pscale2.png\">\n        </td>\n    </tr>\n</tbody></table>\n<p>지역은 Tokyo로 설정했다. 설치는 window의 경우 scoop, mac의 경우 brew를 사용한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\"># window (scoop)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ scoop bucket add pscale https://github.com/planetscale/scoop-bucket.git</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ scoop update pscale</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\"># mac (brew)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ brew install planetscale/tap/pscale</span></span></span></code></pre>\n<p>설치된 pscale로 로그인 인증을 마치면 이제 DB를 연결할 준비가 되었다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ pscale auth login</span></span></span></code></pre>\n<h2 id=\"prisma\" style=\"position:relative;\"><a href=\"#prisma\" aria-label=\"prisma permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma</h2>\n<p>관계형 데이터베이스를 자동으로 Mapping해줄 ORM으로 <strong>Prisma</strong>를 사용했다. 먼저 처음에 create next-app로 생성했던 프로젝트 내에 prisma를 설치한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ npm i @prisma/client</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ npm i -D prisma</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ npx prisma init </span><span class=\"mtk5 mtki\"># Setup Prisma for your app</span></span></span></code></pre>\n<p>설치한 PrismaClient를 사용하기 위한 몇 가지 과정이 필요한데, 먼저 스키마 파일을 정의해야 한다. 프로젝트의 <code>/prisma/schema.prisma</code>를 다음처럼 수정한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">generator client {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  provider </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;prisma-client-js&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  previewFeatures </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> [</span><span class=\"mtk6\">&quot;referentialIntegrity&quot;</span><span class=\"mtk4\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">datasource db {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  provider </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;mysql&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  url      </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk3\">env</span><span class=\"mtk4\">(</span><span class=\"mtk6\">&quot;DATABASE_URL&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  referentialIntegrity </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;prisma&quot;</span><span class=\"mtk4\"> </span><span class=\"mtk5 mtki\">// prisma 참조 무결성 기능 (키 사용 설정)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// Posting model 생성</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">model Posting{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  id Int </span><span class=\"mtk1\">@</span><span class=\"mtk11\">id</span><span class=\"mtk4\"> </span><span class=\"mtk1\">@</span><span class=\"mtk11\">default</span><span class=\"mtk4\">(</span><span class=\"mtk3\">autoincrement</span><span class=\"mtk4\">()) </span><span class=\"mtk5 mtki\">// id (자동으로 증가하는 값으로 설정)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  title String </span><span class=\"mtk5 mtki\">// title</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  content String </span><span class=\"mtk5 mtki\">// content</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  createdAt DateTime </span><span class=\"mtk1\">@</span><span class=\"mtk11\">default</span><span class=\"mtk4\">(</span><span class=\"mtk3\">now</span><span class=\"mtk4\">()) </span><span class=\"mtk5 mtki\">// 현재 시간을 설정</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  updatedAt DateTime </span><span class=\"mtk1\">@</span><span class=\"mtk11\">updatedAt</span><span class=\"mtk4\"> </span><span class=\"mtk5 mtki\">// update된 시간을 설정</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<p>prisma schema를 push하는 작업을 진행하고, pscale command로 DB와 연결하면 다음과 같이 주소를 알려준다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"bash\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ npx prisma db push</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ pscale connect DB명</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Tried address 127.0.0.1:3306, but it</span><span class=\"mtk8\">\\&#39;</span><span class=\"mtk1\">s alreadyㅤinㅤuse. Picking up a random port ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Secure connection to database DB명 and branch main is established!.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Local address to connect your application: 127.0.0.1:53936</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(press ctrl-c to quit)</span></span></span></code></pre>\n<p>프로젝트 내에 .env 파일을 만들고 위 주소를 입력하면 세팅은 거의 끝났다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">DATABASE_URL</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;mysql://127.0.0.1:53936/DB명&quot;</span></span></span></code></pre>\n<h2 id=\"prisma-client\" style=\"position:relative;\"><a href=\"#prisma-client\" aria-label=\"prisma client permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma Client</h2>\n<p><strong>Next.js</strong>는 Express 같은 도구 없이 Bankend API를 쉽게 다룰 수 있는 기능을 제공한다. <code>pages/api</code> 내에 파일로 작성하여 주소로 사용한다.</p>\n<p>먼저 DB를 읽어드리기 위한 <code>read.js</code>를 생성했다. PrismaClient 모듈을 불러오고 <code>async, await</code> 그리고 <code>findMany</code> 메서드를 사용하여 데이터를 반환한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// pages/api/read.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk4\">PrismaClient</span><span class=\"mtk1\"> } </span><span class=\"mtk9\">from</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;@prisma/client&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">prisma</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PrismaClient</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">export</span><span class=\"mtk1\"> </span><span class=\"mtk9\">default</span><span class=\"mtk1\"> </span><span class=\"mtk9\">async</span><span class=\"mtk1\"> </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">ApiRead</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">req</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">res</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">posting</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">prisma</span><span class=\"mtk1\">.</span><span class=\"mtk11\">posting</span><span class=\"mtk1\">.</span><span class=\"mtk3\">findMany</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">res</span><span class=\"mtk1\">.</span><span class=\"mtk3\">json</span><span class=\"mtk1\">(</span><span class=\"mtk4\">posting</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>DB에 데이터를 create하기 위해 <code>post.js</code>를 작성했다. 어떤 값을 담아 전달하는 그러한 과정 없이 간단하게 제목 <code>\"First Post\"</code>, 내용 <code>\"Next JS 첫번째 포스트 입니다.\"</code>로 전달하려고 한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// pages/api/post.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk4\">PrismaClient</span><span class=\"mtk1\"> } </span><span class=\"mtk9\">from</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;@prisma/client&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">prisma</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PrismaClient</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">export</span><span class=\"mtk1\"> </span><span class=\"mtk9\">default</span><span class=\"mtk1\"> </span><span class=\"mtk9\">async</span><span class=\"mtk1\"> </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">ApiPost</span><span class=\"mtk1\">(</span><span class=\"mtk4 mtki\">req</span><span class=\"mtk1\">, </span><span class=\"mtk4 mtki\">res</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">posting</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">prisma</span><span class=\"mtk1\">.</span><span class=\"mtk11\">posting</span><span class=\"mtk1\">.</span><span class=\"mtk3\">create</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">data</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">title</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;First Post&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">content</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;Next JS 첫번째 포스트 입니다.&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">res</span><span class=\"mtk1\">.</span><span class=\"mtk3\">json</span><span class=\"mtk1\">({ </span><span class=\"mtk4\">ok</span><span class=\"mtk1\">: </span><span class=\"mtk7\">true</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>디렉터리 <code>index.js</code>로 돌아와서, API를 테스트할 JSX를 작성했다. Add Post 버튼으로 <code>/api/post</code>를 실행하면 받은 데이터를 <code>JSON.stringify()</code>로 아래에 나타나게끔 했다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"bash\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ yarn add axios</span></span></span></code></pre>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"javascript\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// /index.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Axios</span><span class=\"mtk1\"> </span><span class=\"mtk9\">from</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;axios&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk4\">useState</span><span class=\"mtk1\">, </span><span class=\"mtk4\">useEffect</span><span class=\"mtk1\"> } </span><span class=\"mtk9\">from</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;react&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">export</span><span class=\"mtk1\"> </span><span class=\"mtk9\">default</span><span class=\"mtk1\"> </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">Home</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk11\">posting</span><span class=\"mtk1\">, </span><span class=\"mtk11\">setPosting</span><span class=\"mtk1\">] </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">useState</span><span class=\"mtk1\">({})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">useEffect</span><span class=\"mtk1\">(() </span><span class=\"mtk9\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Axios</span><span class=\"mtk1\">.</span><span class=\"mtk3\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/api/read&quot;</span><span class=\"mtk1\">).</span><span class=\"mtk3\">then</span><span class=\"mtk1\">((</span><span class=\"mtk4 mtki\">res</span><span class=\"mtk1\">) </span><span class=\"mtk9\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">setPosting</span><span class=\"mtk1\">(</span><span class=\"mtk11\">res</span><span class=\"mtk1\">.</span><span class=\"mtk4\">data</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">console</span><span class=\"mtk1\">.</span><span class=\"mtk3\">log</span><span class=\"mtk1\">(</span><span class=\"mtk11\">res</span><span class=\"mtk1\">.</span><span class=\"mtk4\">data</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }, [</span><span class=\"mtk4\">posting</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">async</span><span class=\"mtk1\"> </span><span class=\"mtk9\">function</span><span class=\"mtk1\"> </span><span class=\"mtk3\">onClick</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Axios</span><span class=\"mtk1\">.</span><span class=\"mtk3\">post</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/api/post&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;</span><span class=\"mtk4\">div</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtki\">style</span><span class=\"mtk8\">=</span><span class=\"mtk9\">{</span><span class=\"mtk1\">{ </span><span class=\"mtk4\">margin</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;30px&quot;</span><span class=\"mtk1\"> }</span><span class=\"mtk9\">}</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;</span><span class=\"mtk4\">h1</span><span class=\"mtk1\">&gt;Posting&lt;/</span><span class=\"mtk4\">h1</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;</span><span class=\"mtk4\">button</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtki\">onClick</span><span class=\"mtk8\">=</span><span class=\"mtk9\">{</span><span class=\"mtk4\">onClick</span><span class=\"mtk9\">}</span><span class=\"mtk1\">&gt;Add Post&lt;/</span><span class=\"mtk4\">button</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;</span><span class=\"mtk4\">p</span><span class=\"mtk1\">&gt;</span><span class=\"mtk9\">{</span><span class=\"mtk7\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk8\">stringify</span><span class=\"mtk1\">(</span><span class=\"mtk4\">posting</span><span class=\"mtk1\">)</span><span class=\"mtk9\">}</span><span class=\"mtk1\">&lt;/</span><span class=\"mtk4\">p</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/addpost.png\" alt=\"addpost\"></p>\n<p>Add Post를 눌러 보면 Planetscale에 잘 반영이 된다.</p>\n<h2 id=\"prisma-studio\" style=\"position:relative;\"><a href=\"#prisma-studio\" aria-label=\"prisma studio permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma Studio</h2>\n<p>Prisma는 데이터베이스의 GUI Tool을 제공한다. <code>npx prisma studio</code>를 사용하여 <code>localhost:5555</code>에서 작성한 model을 확인할 수 있다.</p>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/prismastudio.png\" alt=\"prismastudio\"></p>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://www.prisma.io/docs/concepts/components/prisma-client\">Prisma Client | Next-generation ORM for Node.js &#x26; TypeScript</a></p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLZKTXPmaJk8Lx3TqPlcEAzTL8zcpBz7NP\">Next js 강좌 | 코딩앙마</a></p>\n<p><a href=\"https://kir93.tistory.com/m/entry/NextJS-API-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-feat-Prisma-Planetscale\">NextJS API 활용하기 (feat. Prisma, Planetscale)</a></p>\n<p><a href=\"https://ts2ree.tistory.com/194?category=535825\">데이터 유지를 prisma 를 통해 하자 (CRUD)</a></p>\n<p><a href=\"https://www.itworld.co.kr/news/207029\">플래닛스케일 리뷰 | 수평 확장 가능한 마이SQL 호환 서버리스 DB 플랫폼 - ITWorld Korea</a></p>\n<p><a href=\"https://defineall.tistory.com/872\">[Prisma] Prisma Client란? / 사용법</a></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Next/221213/#create-next-app\">Create Next App</a></li>\n<li><a href=\"/Next/221213/#planetscale\">Planetscale</a></li>\n<li><a href=\"/Next/221213/#prisma\">Prisma</a></li>\n<li><a href=\"/Next/221213/#prisma-client\">Prisma Client</a></li>\n<li><a href=\"/Next/221213/#prisma-studio\">Prisma Studio</a></li>\n<li><a href=\"/Next/221213/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 12월 13일","title":"Next.js REST API 세팅하기 (with Prisma, PlanetScale)","tags":["Next","Prisma","PlanetScale"]}}},"pageContext":{"slug":"/Next/221213/","previous":{"fields":{"slug":"/Jest/221129/"},"frontmatter":{"title":"Jest React 컴포넌트/스냅샷 테스트"}},"next":{"fields":{"slug":"/React/230104/"},"frontmatter":{"title":"React에서 Open API XML 데이터 파싱하기 (with Express)"}}}},"staticQueryHashes":["1081905842","3911196313"]}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/Next/221213/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"Next.js, Prisma, PlanetScale을 통해 초기 개발 환경 구축, Axios로 간단한 get, post 테스트 Create Next App Next.js는 React 기반의, React를 품은 프레임워크이다. SSR (Server Side Rendering) 을 지원하여 SEO (Search Engine Optimize) 에 수월하다. 소…","html":"<blockquote>\n<p>Next.js, Prisma, PlanetScale을 통해 초기 개발 환경 구축, Axios로 간단한 get, post 테스트</p>\n</blockquote>\n<h2>Create Next App</h2>\n<p><strong>Next.js</strong>는 React 기반의, React를 품은 프레임워크이다. <strong>SSR (Server Side Rendering)</strong> 을 지원하여 <strong>SEO (Search Engine Optimize)</strong> 에 수월하다. 소스코드 안에 HTML이 남아있는 상태로 렌더링되기 때문에 네트워크 지연과 같은 상황에도 최소한 텅 빈 화면을 볼 일은 없을 것이다.</p>\n<p>Next App은 기존 React에서 사용했던 Boilerplate와 유사한 명령어로 설치할 수 있다.</p>\n<pre><code class=\"language-bash\">$ yarn create next-app 프로젝트명\n</code></pre>\n<h2>Planetscale</h2>\n<p><strong>Planetscale</strong>은 비테스(Vitess) 기반의 Mysql을 호환하는 DB로, 동시 연결도 거의 무제한에 가깝게 할 수 있다. 초기에 별도 결제 수단 등록 없이 무료로 사용 가능하며, 요금제 한도 초과 시 스케일러 요금제로 전환할 수 있다.</p>\n<p>회원 가입 후 DB 생성을 진행. (Git으로 Login 가능)</p>\n<table>\n    <tr>\n        <td>\n            <img alt='pscale1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/pscale1.png'>\n        </td>\n        <td>\n            <img alt='pscale2' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/pscale2.png'>\n        </td>\n    </tr>\n</table>\n<p>지역은 Tokyo로 설정했다. 설치는 window의 경우 scoop, mac의 경우 brew를 사용한다.</p>\n<pre><code class=\"language-bash\"># window (scoop)\n$ scoop bucket add pscale https://github.com/planetscale/scoop-bucket.git\n$ scoop update pscale\n\n# mac (brew)\n$ brew install planetscale/tap/pscale\n</code></pre>\n<p>설치된 pscale로 로그인 인증을 마치면 이제 DB를 연결할 준비가 되었다.</p>\n<pre><code class=\"language-bash\">$ pscale auth login\n</code></pre>\n<h2>Prisma</h2>\n<p>관계형 데이터베이스를 자동으로 Mapping해줄 ORM으로 <strong>Prisma</strong>를 사용했다. 먼저 처음에 create next-app로 생성했던 프로젝트 내에 prisma를 설치한다.</p>\n<pre><code class=\"language-bash\">$ npm i @prisma/client\n$ npm i -D prisma\n\n$ npx prisma init # Setup Prisma for your app\n</code></pre>\n<p>설치한 PrismaClient를 사용하기 위한 몇 가지 과정이 필요한데, 먼저 스키마 파일을 정의해야 한다. 프로젝트의 <code>/prisma/schema.prisma</code>를 다음처럼 수정한다.</p>\n<pre><code class=\"language-java\">generator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"referentialIntegrity\"]\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n  referentialIntegrity = \"prisma\" // prisma 참조 무결성 기능 (키 사용 설정)\n}\n\n// Posting model 생성\nmodel Posting{\n  id Int @id @default(autoincrement()) // id (자동으로 증가하는 값으로 설정)\n  title String // title\n  content String // content\n  createdAt DateTime @default(now()) // 현재 시간을 설정\n  updatedAt DateTime @updatedAt // update된 시간을 설정\n}\n</code></pre>\n<p>prisma schema를 push하는 작업을 진행하고, pscale command로 DB와 연결하면 다음과 같이 주소를 알려준다.</p>\n<pre><code class=\"language-bash\">$ npx prisma db push\n\n$ pscale connect DB명\nTried address 127.0.0.1:3306, but it\\'s alreadyㅤinㅤuse. Picking up a random port ...\nSecure connection to database DB명 and branch main is established!.\n\nLocal address to connect your application: 127.0.0.1:53936\n(press ctrl-c to quit)\n</code></pre>\n<p>프로젝트 내에 .env 파일을 만들고 위 주소를 입력하면 세팅은 거의 끝났다.</p>\n<pre><code class=\"language-javascript\">DATABASE_URL = \"mysql://127.0.0.1:53936/DB명\"\n</code></pre>\n<h2>Prisma Client</h2>\n<p><strong>Next.js</strong>는 Express 같은 도구 없이 Bankend API를 쉽게 다룰 수 있는 기능을 제공한다. <code>pages/api</code> 내에 파일로 작성하여 주소로 사용한다.</p>\n<p>먼저 DB를 읽어드리기 위한 <code>read.js</code>를 생성했다. PrismaClient 모듈을 불러오고 <code>async, await</code> 그리고 <code>findMany</code> 메서드를 사용하여 데이터를 반환한다.</p>\n<pre><code class=\"language-javascript\">// pages/api/read.js\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default async function ApiRead(req, res) {\n  const posting = await prisma.posting.findMany()\n  res.json(posting)\n}\n</code></pre>\n<p>DB에 데이터를 create하기 위해 <code>post.js</code>를 작성했다. 어떤 값을 담아 전달하는 그러한 과정 없이 간단하게 제목 <code>\"First Post\"</code>, 내용 <code>\"Next JS 첫번째 포스트 입니다.\"</code>로 전달하려고 한다.</p>\n<pre><code class=\"language-javascript\">// pages/api/post.js\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default async function ApiPost(req, res) {\n  const posting = await prisma.posting.create({\n    data: {\n      title: \"First Post\",\n      content: \"Next JS 첫번째 포스트 입니다.\",\n    },\n  })\n  res.json({ ok: true })\n}\n</code></pre>\n<p>디렉터리 <code>index.js</code>로 돌아와서, API를 테스트할 JSX를 작성했다. Add Post 버튼으로 <code>/api/post</code>를 실행하면 받은 데이터를 <code>JSON.stringify()</code>로 아래에 나타나게끔 했다.</p>\n<pre><code class=\"language-bash\">$ yarn add axios\n</code></pre>\n<pre><code class=\"language-javascript\">// /index.js\nimport Axios from \"axios\"\nimport { useState, useEffect } from \"react\"\n\nexport default function Home() {\n  const [posting, setPosting] = useState({})\n\n  useEffect(() => {\n    Axios.get(\"/api/read\").then((res) => {\n      setPosting(res.data)\n      console.log(res.data)\n    })\n  }, [posting])\n\n  async function onClick() {\n    await Axios.post(\"/api/post\")\n  }\n\n  return (\n    &#x3C;div style={{ margin: \"30px\" }}>\n      &#x3C;h1>Posting&#x3C;/h1>\n      &#x3C;button onClick={onClick}>Add Post&#x3C;/button>\n      &#x3C;p>{JSON.stringify(posting)}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/addpost.png\" alt=\"addpost\"></p>\n<p>Add Post를 눌러 보면 Planetscale에 잘 반영이 된다.</p>\n<h2>Prisma Studio</h2>\n<p>Prisma는 데이터베이스의 GUI Tool을 제공한다. <code>npx prisma studio</code>를 사용하여 <code>localhost:5555</code>에서 작성한 model을 확인할 수 있다.</p>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/221213/prismastudio.png\" alt=\"prismastudio\"></p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://www.prisma.io/docs/concepts/components/prisma-client\" target=\"_blank\" rel=\"noopener noreferrer\">Prisma Client | Next-generation ORM for Node.js &#x26; TypeScript</a></p>\n<p><a href=\"https://www.youtube.com/playlist?list=PLZKTXPmaJk8Lx3TqPlcEAzTL8zcpBz7NP\" target=\"_blank\" rel=\"noopener noreferrer\">Next js 강좌 | 코딩앙마</a></p>\n<p><a href=\"https://kir93.tistory.com/m/entry/NextJS-API-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-feat-Prisma-Planetscale\" target=\"_blank\" rel=\"noopener noreferrer\">NextJS API 활용하기 (feat. Prisma, Planetscale)</a></p>\n<p><a href=\"https://ts2ree.tistory.com/194?category=535825\" target=\"_blank\" rel=\"noopener noreferrer\">데이터 유지를 prisma 를 통해 하자 (CRUD)</a></p>\n<p><a href=\"https://www.itworld.co.kr/news/207029\" target=\"_blank\" rel=\"noopener noreferrer\">플래닛스케일 리뷰 | 수평 확장 가능한 마이SQL 호환 서버리스 DB 플랫폼 - ITWorld Korea</a></p>\n<p><a href=\"https://defineall.tistory.com/872\" target=\"_blank\" rel=\"noopener noreferrer\">[Prisma] Prisma Client란? / 사용법</a></p>","tableOfContents":"<ul>\n<li><a href=\"/Next/221213/#create-next-app\">Create Next App</a></li>\n<li><a href=\"/Next/221213/#planetscale\">Planetscale</a></li>\n<li><a href=\"/Next/221213/#prisma\">Prisma</a></li>\n<li><a href=\"/Next/221213/#prisma-client\">Prisma Client</a></li>\n<li><a href=\"/Next/221213/#prisma-studio\">Prisma Studio</a></li>\n<li><a href=\"/Next/221213/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 12월 13일","title":"Next.js REST API 세팅하기 (with Prisma, PlanetScale)","tags":["Next","Prisma","PlanetScale"]}}},"pageContext":{"slug":"/Next/221213/","previous":{"fields":{"slug":"/Jest/221129/"},"frontmatter":{"title":"Jest React 컴포넌트/스냅샷 테스트"}},"next":{"fields":{"slug":"/React/230104/"},"frontmatter":{"title":"React에서 Open API XML 데이터 파싱하기 (with Express)"}}}},"staticQueryHashes":["1081905842","3911196313"]}
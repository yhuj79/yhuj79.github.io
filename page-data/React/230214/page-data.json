{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/230214/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"React-Quill은 간편하게 사용할 수 있는 Rich Text Editor이다. 하이퍼링크, 글꼴, 색상, 스타일, 이미지 등의 양식을 쉽게 구성할 수 있다. React-Quill 구성하기 React App에 react-quill을 설치한다. App.js에 다음과 같이 Quill 에디터를 구성하였다.\n상단 버튼을 클릭하면 콘솔에서 에디터의 value를…","html":"<blockquote>\n<p>React-Quill은 간편하게 사용할 수 있는 Rich Text Editor이다.</p>\n<p>하이퍼링크, 글꼴, 색상, 스타일, 이미지 등의 양식을 쉽게 구성할 수 있다.</p>\n</blockquote>\n<h2>React-Quill 구성하기</h2>\n<p>React App에 <code>react-quill</code>을 설치한다.</p>\n<pre><code class=\"language-bash\">$ yarn add react-quill\n</code></pre>\n<p><code>App.js</code>에 다음과 같이 Quill 에디터를 구성하였다.<br>\n상단 버튼을 클릭하면 콘솔에서 에디터의 value를 확인할 수 있게 만들었다.</p>\n<pre><code class=\"language-javascript\">// src/App.js\nimport { useMemo, useRef, useState } from \"react\"\nimport \"react-quill/dist/quill.snow.css\"\nimport ReactQuill from \"react-quill\"\n\nfunction App() {\n  const quillRef = useRef()\n  const [content, setContent] = useState(\"\")\n\n  // quill에서 사용할 모듈\n  // useMemo를 사용하여 modules가 렌더링 시 에디터가 사라지는 버그를 방지\n  const modules = useMemo(() => {\n    return {\n      toolbar: {\n        container: [\n          [{ header: [1, 2, 3, false] }],\n          [\"bold\", \"italic\", \"underline\", \"strike\"],\n          [\"blockquote\"],\n          [{ list: \"ordered\" }, { list: \"bullet\" }],\n          [{ color: [] }, { background: [] }],\n          [{ align: [] }, \"link\", \"image\"],\n        ],\n      },\n    }\n  }, [])\n\n  return (\n    &#x3C;div style={{ margin: \"50px\" }}>\n      &#x3C;button onClick={() => console.log(content)}>Value&#x3C;/button>\n      &#x3C;ReactQuill\n        style={{ width: \"600px\", height: \"600px\" }}\n        placeholder=\"Quill Content\"\n        theme=\"snow\"\n        ref={quillRef}\n        value={content}\n        onChange={setContent}\n        modules={modules}\n      />\n    &#x3C;/div>\n  )\n}\n\nexport default App\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/quill_1.gif\" alt=\"quill_1\"></p>\n<p>Html 형태의 문자열이 content 값에 들어왔다.<br>\n이 포스팅에서 CRUD까지 다루진 않지만 만약 DB에 저장된 content 값을 출력하고자 한다면 다음과 같이 <code>dangerouslySetInnerHTML</code>, <code>DOMPurify</code>를 사용하면 된다.</p>\n<pre><code class=\"language-bash\">$ yarn add isomorphic-dompurify\n</code></pre>\n<pre><code class=\"language-javascript\">// src/ReadQuill.js\nimport DOMPurify from \"isomorphic-dompurify\"\nimport \"react-quill/dist/quill.core.css\"\n\nfunction ReadQuill() {\n  const content = \"&#x3C;h1>안녕하세요!&#x3C;/h1>&#x3C;h2>안녕하세요!&#x3C;/h2>&#x3C;h3>안녕하세요!&#x3C;/h3>\"\n  return (\n    &#x3C;div\n      className=\"view ql-editor\" // react-quill css\n      dangerouslySetInnerHTML={{\n        __html: DOMPurify.sanitize(content),\n      }}\n    />\n  )\n}\n\nexport default ReadQuill\n</code></pre>\n<p>이렇게 dangerouslySetInnerHTML을 사용하여 직접적으로 HTML을 설정하는 것은 <a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\" target=\"_blank\" rel=\"noopener noreferrer\">Cross Site Scripting(XSS)</a>에 취약하다고 한다. 그래서 XSS 공격을 방지하는 dompurify와 같은 sanitization library와 함께 사용해 주었다.</p>\n<h2>에디터에 이미지를 올리면?</h2>\n<p>일반적인 텍스트가 입력되면 content값은 그렇게 크지 않지만, 이미지가 들어오게 될 경우 문제가 생긴다. 이미지를 에디터에 올려보고 value를 체크해보자.</p>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/quill_2.gif\" alt=\"quill_2\"></p>\n<pre><code class=\"language-html\">&#x3C;img src=\"data:image/png;base64, 엄청나게 긴 base64 value...\n</code></pre>\n<p>React-Quill은 이미지를 올리게 되면 8비트 이진 데이터를 문자 코드에 영향을 받지 않는 공통 ASCII 문자열로 바꾼다. (<a href=\"https://ko.wikipedia.org/wiki/%EB%B2%A0%EC%9D%B4%EC%8A%A464\" target=\"_blank\" rel=\"noopener noreferrer\">base64</a>) 따라서 위와 같은 base64 인코딩이 된 형태로 이미지가 저장된다. 이렇게 value에 담긴 값을 DB에 저장하려 하면 전송에 실패하게 된다.</p>\n<h2>Firebase Storage로 이미지 처리하기</h2>\n<p>이미지 업로드 시 base64 문자열이 들어가는 방식 대신 이미지가 <code>Firebase Storage</code>에 저장이 되고, 저장된 이미지 URL을 에디터에 삽입하는 방식으로 구현하려고 한다.</p>\n<p><a href=\"https://console.firebase.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase Console</a>에서 새 프로젝트를 생성한다.</p>\n<p><code>Firebase 프로젝트 생성</code> > <code>웹 앱 추가</code> > <code>Storage</code> > <code>시작하기 (지역 : asia-east1)</code></p>\n<table>\n  <tr>\n    <td valign=\"top\"><img alt=\"fb1\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/fb1.png\"/></td>\n    <td valign=\"top\"><img alt=\"fb2\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/fb2.png\"/></td>\n  </tr>\n  <tr>\n    <td valign=\"top\"><img alt=\"fb3\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/fb3.png\"/></td>\n    <td valign=\"top\"><img alt=\"fb4\" src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/fb4.png\"/></td>\n  </tr>\n</table>\n<p>프로젝트에 <code>firebase</code>를 설치하고 SDK를 작성한다.</p>\n<pre><code class=\"language-bash\">$ yarn add firebase\n</code></pre>\n<pre><code class=\"language-javascript\">// src/Firebase.js\n// Import the functions you need from the SDKs you need\nimport { initializeApp, getApp, getApps } from \"firebase/app\"\nimport { getStorage } from \"firebase/storage\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"xxxxxxxxxxxxxxxxxx\",\n  authDomain: \"xxxxxxxxxxxxxxxxxx\",\n  projectId: \"xxxxxxxxxxxxxxxxxx\",\n  storageBucket: \"xxxxxxxxxxxxxxxxxx\",\n  messagingSenderId: \"xxxxxxxxxxxxxxxxxx\",\n  appId: \"xxxxxxxxxxxxxxxxxx\",\n}\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp()\nexport const storage = getStorage()\nexport default app\n</code></pre>\n<p>Storage의 업로드 및 읽기 권한 설정을 위해 <code>firebase-tools</code>를 설치하고 로그인 및 초기 설정을 진행한다.</p>\n<pre><code class=\"language-bash\">$ yarn add firebase-tools\n$ firebase login\n$ firebase init\n    -> Storage: Configure a security rules fileㅤfor Cloud Storage\n    -> Use an existing project\n    -> 프로젝트 선택\n</code></pre>\n<p>프로젝트에 생성된 <code>storage.rules</code> 파일을 다음과 같이 수정한다.<br>\n수정 후 <code>firebase deploy --only storage</code> 로 적용하면 권한이 부여된다.</p>\n<pre><code class=\"language-bash\"># /storage.rules\nrules_version = '2';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    match /{allPaths=**} {\n      allow read, write: if true;\n    }\n  }\n}\n</code></pre>\n<p>modules에 설정할 이미지 핸들러를 작성하였다.<br>\n이미지 선택이 완료되면 Firebase Storage에 파일명 <code>image/Date.now()</code>로 저장이 되고, <code>getDownloadURL</code> 메서드로 받은 이미지 URL을 에디터에 삽입하는 흐름이다.</p>\n<p>(<code>Date.now()</code> 메서드는 UTC 기준으로 1970년 1월 1일 0시 0분 0초부터 현재까지 경과된 밀리 초를 반환한다.)</p>\n<pre><code class=\"language-javascript\">// src/App.js\n...\n...\nimport {storage} from \"./Firebase\";\nimport { uploadBytes, getDownloadURL, ref } from \"firebase/storage\";\n...\n...\n  // 이미지 핸들러\n  const imageHandler = () => {\n    const input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"file\");\n    input.setAttribute(\"accept\", \"image/*\");\n    input.click();\n\n    input.addEventListener(\"change\", async () => {\n      const editor = quillRef.current.getEditor();\n      const file = input.files[0];\n      const range = editor.getSelection(true);\n\n      try {\n        // 파일명을 \"image/Date.now()\"로 저장\n        const storageRef = ref(\n          storage,\n          `image/${Date.now()}`\n        );\n        // Firebase Method : uploadBytes, getDownloadURL\n        await uploadBytes(storageRef, file).then((snapshot) => {\n          getDownloadURL(snapshot.ref).then((url) => {\n            // 이미지 URL 에디터에 삽입\n            editor.insertEmbed(range.index, \"image\", url);\n            // URL 삽입 후 커서를 이미지 뒷 칸으로 이동\n            editor.setSelection(range.index + 1);\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    });\n  };\n...\n...\n</code></pre>\n<p>Storage에 성공적으로 업로드 되었고, 이미지 URL 또한 에디터에 잘 반영이 되었다.</p>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/quill_3.gif\" alt=\"quill_3\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yhuj79/blog-assets/main/230214/quill_4.png\" alt=\"quill_4\"></p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\" target=\"_blank\" rel=\"noopener noreferrer\">사이트 간 스크립팅 - 위키백과, 우리 모두의 백과사전</a></p>\n<p><a href=\"https://mingeesuh.tistory.com/entry/Quill-React-%EC%97%90%EB%94%94%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%97%85%EB%A1%9C%EB%93%9C-%EB%B0%8F-%EC%82%AC%EC%9D%B4%EC%A6%88-%EC%A1%B0%EC%A0%88\" target=\"_blank\" rel=\"noopener noreferrer\">Quill React 에디터 사용해보기 (이미지 업로드 및 사이즈 조절)</a></p>\n<p><a href=\"https://mingeesuh.tistory.com/entry/Firebase-%EC%9B%B9-%ED%8C%8C%EC%9D%B4%EC%96%B4%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%97%85%EB%A1%9C%EB%93%9C-%EB%B0%8F-%EB%A7%81%ED%81%AC-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">[Firebase 웹] 파이어베이스 스토리지 이미지 업로드 및 링크 가져오기</a></p>\n<p><a href=\"https://12ahn22.tistory.com/entry/Quill-%EC%97%90%EB%94%94%ED%84%B0-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">Quill 에디터 - 이미지 처리하기</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\" target=\"_blank\" rel=\"noopener noreferrer\">Date.now() - JavaScript | MDN</a></p>","tableOfContents":"<ul>\n<li><a href=\"/React/230214/#react-quill-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\">React-Quill 구성하기</a></li>\n<li><a href=\"/React/230214/#%EC%97%90%EB%94%94%ED%84%B0%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EC%98%AC%EB%A6%AC%EB%A9%B4\">에디터에 이미지를 올리면?</a></li>\n<li><a href=\"/React/230214/#firebase-storage%EB%A1%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\">Firebase Storage로 이미지 처리하기</a></li>\n<li><a href=\"/React/230214/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2023년 02월 14일","title":"React-Quill Editor 이미지 처리하기 (Firebase Storage)","tags":["React","Quill","Image","Firebase"]}}},"pageContext":{"slug":"/React/230214/","previous":{"fields":{"slug":"/Javascript/230125/"},"frontmatter":{"title":"구조 분해 할당"}},"next":{"fields":{"slug":"/Algorithm/230224/"},"frontmatter":{"title":"시간 복잡도, Big-O(빅오) 표기법"}}}},"staticQueryHashes":["1081905842","3911196313"]}
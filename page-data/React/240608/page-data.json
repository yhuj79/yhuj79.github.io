{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/240608/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"웹 페이지 개발을 하다 보면 이미지의 로딩에 의해 렌더링이 부자연스럽거나 끊기는 현상이 종종 발생한다. 이를 처리하기 위한 다양한 방법 중 프리 로딩(Pre Loading)을 예제를 통해 적용시켜 보았다. Image Pre Loading 이미지 프리 로딩 (Image Pre Loading)이란 사용자가 실제로 요청하기 전에 미리 이미지를 다운로드하여 캐시…","html":"<blockquote>\n<p>웹 페이지 개발을 하다 보면 이미지의 로딩에 의해 렌더링이 부자연스럽거나 끊기는 현상이 종종 발생한다. 이를 처리하기 위한 다양한 방법 중 프리 로딩(Pre Loading)을 예제를 통해 적용시켜 보았다.</p>\n</blockquote>\n<h2>Image Pre Loading</h2>\n<p><strong>이미지 프리 로딩 (Image Pre Loading)</strong>이란 사용자가 실제로 요청하기 전에 미리 이미지를 다운로드하여 캐시에 저장하는 웹 성능 최적화 기술이다. 사용자가 페이지를 방문할 때 브라우저는 이미 캐시에 저장된 이미지를 로드하여 페이지 로딩 속도를 향상시킬 수 있다.</p>\n<p>Pre Loading은 다음과 같은 장점을 제공한다.</p>\n<ol>\n<li><strong>로딩 속도 향상</strong> : 사용자가 실제로 요청하기 전에 미리 처리하기 때문에 로딩 속도가 크게 향상된다. 이는 이미지가 많은 페이지에서 효과적일 수 있다.</li>\n<li><strong>사용자 경험 향상</strong> : 빠른 로딩 속도는 사용자 경험을 향상시키고 사용자 참여도를 높일 수 있다.</li>\n<li><strong>데이터 사용량 감소</strong> : 이미지가 이미 캐시에 저장되어 있으므로 사용자는 네트워크를 통해 이미지를 다시 다운로드할 필요가 없어 데이터 사용량을 줄일 수 있다.</li>\n</ol>\n<p>하지만 다음과 같은 단점도 가지고 있다.</p>\n<ol>\n<li><strong>서버 부하 증가</strong> : Pre Loading을 사용하면 서버에 추가적인 부하가 발생할 수 있다. 특히 많은 사용자가 동시에 이미지를 Pre Loading하는 경우 서버 성능에 영향을 미칠 수 있다.</li>\n<li><strong>캐시 공간 사용 증가</strong> : Pre Loading된 이미지는 사용자 기기의 캐시 공간을 차지한다. 캐시 공간이 부족하면 다른 데이터를 저장하는 데 영향을 미칠 수 있다.</li>\n</ol>\n<h2>Pre Loading 방법, 고려 사항</h2>\n<p>Pre Loading 방법에는 다음과 같은 것들이 있다.</p>\n<ol>\n<li><strong><code>&#x3C;link rel=\"preload\"></code> 태그 사용</strong>: HTML5에서 도입된 <code>&#x3C;link rel=\"preload\"></code> 태그는 이미지, CSS, JavaScript 파일 등을 미리 로딩하도록 지시하는 데 사용된다.</li>\n<li><strong>JavaScript 사용</strong>: JavaScript를 사용하여 이미지를 미리 로딩할 수 있다. <code>Image</code> 객체를 사용하여 이미지를 로드하고 <code>onload</code> 이벤트를 사용하여 이미지가 로드되었는지 확인할 수 있다.</li>\n<li><strong>Server Pre Loading</strong>: 서버 측에서 이미지를 미리 로딩하고 응답 헤더에 <code>Cache-Control</code> 및 <code>Expires</code> 헤더를 사용하여 캐싱하도록 지시할 수 있다.</li>\n</ol>\n<p>Pre Loading을 사용할 때는 다음 사항을 고려해야 한다.</p>\n<ol>\n<li><strong>Pre Loading할 이미지 선택</strong>: 모든 이미지를 Pre Loading하는 것은 서버 부하와 캐시 공간 사용량을 증가시킬 수 있으므로 중요하거나 자주 표시되는 이미지만 Pre Loading하는 것이 좋다.</li>\n<li><strong>사용자 연결 속도 고려</strong>: 사용자의 연결 속도가 느린 경우 Pre Loading이 오히려 페이지 로딩 속도를 느리게 만들 수 있다. 따라서 사용자 연결 속도에 따라 Pre Loading 전략을 조정해야 한다.</li>\n<li><strong>A/B 테스트 수행</strong>: Pre Loading이 실제로 페이지 로딩 속도와 사용자 경험에 어떤 영향을 미치는지 확인하기 위해 A/B 테스트를 수행하는 것이 좋다.</li>\n</ol>\n<p>다음은 JavaScript를 사용한 Pre Loading 예시이다.</p>\n<pre><code class=\"language-javascript\">// Javascript\nfunction preLoad(arr) {\n  arr.forEach((url) => {\n    const image = new Image()\n    image.src = url\n  })\n}\n\npreLoad([\"a.png\", \"b.png\", \"c.png\"])\n</code></pre>\n<p>preLoad 함수는 이미지 URL 배열을 받아 각 URL에 대해 Image 객체를 생성하고, 해당 URL을 src 속성에 할당하여 이미지를 로드한다. 이렇게 하면 사용자가 해당 이미지를 필요로 할 때 브라우저가 이미지를 캐시에서 빠르게 로드할 수 있다.</p>\n<h2>React 예제 만들기</h2>\n<p>이미지 Pre Loading의 효과를 확인하기 위해 많은 양의 이미지를 출력하는 웹 페이지를 작성하고 테스트해 보았다. 먼저 일반적으로 작성한 경우이다.</p>\n<pre><code class=\"language-javascript\">// React App\nimport { useState, useEffect } from \"react\"\nimport \"./App.css\"\n\nfunction App() {\n  const totalImages = 300\n  const arrImg = Array.from(\n    { length: totalImages },\n    (_, index) => `https://picsum.photos/id/${index}/500/400`\n  )\n\n  const [num, setNum] = useState(0)\n  const [isStarted, setIsStarted] = useState(false)\n\n  useEffect(() => {\n    let interval\n    if (isStarted) {\n      interval = setInterval(() => {\n        setNum((prevNum) => {\n          if (prevNum >= totalImages) {\n            clearInterval(interval)\n            return prevNum\n          }\n          return prevNum + 1\n        })\n      }, 30)\n    }\n    return () => clearInterval(interval)\n  }, [isStarted, totalImages])\n\n  // 로딩되지 않는 picsum 이미지는 1번 이미지로 대체\n  const handleImageError = (e) => {\n    e.target.src = \"https://picsum.photos/id/1/500/400\"\n  }\n\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;div className=\"num-grid\">\n        &#x3C;h1>PreLoad OFF&#x3C;/h1>\n        &#x3C;h1 className=\"num\">{num}&#x3C;/h1>\n      &#x3C;/div>\n      &#x3C;button className=\"button\" onClick={() => setIsStarted(true)}>\n        Start\n      &#x3C;/button>\n      &#x3C;div className=\"image-grid\">\n        {arrImg.slice(0, num).map((src, index) => (\n          &#x3C;div key={index} className=\"image-container\">\n            &#x3C;div className=\"image-number\">{index + 1}&#x3C;/div>\n            &#x3C;img\n              className=\"image\"\n              alt={index}\n              src={src}\n              onError={handleImageError}\n            />\n          &#x3C;/div>\n        ))}\n      &#x3C;/div>\n    &#x3C;/div>\n  )\n}\n\nexport default App\n</code></pre>\n<pre><code class=\"language-css\">// CSS\n.App {\n  text-align: center;\n}\n\n.num-grid {\n  justify-content: center;\n  display: flex;\n}\n\n.num {\n  width: 100px;\n  color: blue;\n}\n\n.button {\n  width: 100px;\n  height: 30px;\n  font-size: 15px;\n  margin: 0 20px;\n}\n\n.image-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));\n  gap: 10px;\n  padding: 20px;\n}\n\n.image-container {\n  position: relative;\n  height: 56.6px;\n}\n\n.image-number {\n  position: absolute;\n  top: 3px;\n  left: 3px;\n  background-color: rgba(0, 0, 0, 0.5);\n  color: white;\n  border-radius: 50%;\n  width: 25px;\n  height: 25px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.image {\n  width: 100%;\n  height: auto;\n  display: block;\n  border-radius: 10px;\n}\n</code></pre>\n<img alt='preloadoff' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240608/preloadoff.gif'>\n<p>이미지는 <a href=\"https://picsum.photos/\" target=\"_blank\" rel=\"noopener noreferrer\">Lorem Picsum</a>의 더미 이미지를 활용하였다.</p>\n<p>Start 버튼을 누르면 1번 ~ 300번의 Picsum 이미지를 순차적으로 로드하는 방식이다. setInterval을 사용하여 일정 시간 간격으로 num 상태를 증가시키고, num에 따라 이미지를 로드한다. 위의 결과로 보다시피 로딩 시간이 걸려 렌더링이 지연되는 것을 볼 수 있다.</p>\n<h2>Pre Loading 적용 테스트</h2>\n<p>이제 이 코드에 Pre Loading을 적용시켜 보았다.</p>\n<pre><code class=\"language-javascript\">// React App\nimport { useState, useEffect } from \"react\"\nimport \"./App.css\"\n\nfunction App() {\n  const totalImages = 300\n  const arrImg = Array.from(\n    { length: totalImages },\n    (_, index) => `https://picsum.photos/id/${index}/500/400`\n  )\n\n  const [num, setNum] = useState(0)\n  const [isStarted, setIsStarted] = useState(false)\n  const [preloadedImages, setPreloadedImages] = useState([])\n  const [isPreloaded, setIsPreloaded] = useState(false)\n\n  useEffect(() => {\n    function preloadImages(arr) {\n      const loadedImages = []\n      let loadedCount = 0\n      arr.forEach((url, index) => {\n        const image = new Image()\n        image.src = url\n        image.onload = () => {\n          loadedImages[index] = image\n          loadedCount++\n          if (loadedCount === arr.length) {\n            setPreloadedImages(loadedImages)\n            setIsPreloaded(true)\n          }\n        }\n        // 로딩되지 않는 picsum 이미지 처리\n        image.onerror = () => {\n          const fallbackImage = new Image()\n          fallbackImage.src = \"https://picsum.photos/id/1/500/400\"\n          loadedImages[index] = fallbackImage\n          loadedCount++\n          if (loadedCount === arr.length) {\n            setPreloadedImages(loadedImages)\n            setIsPreloaded(true)\n          }\n        }\n      })\n    }\n\n    preloadImages(arrImg)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    let interval\n    if (isStarted) {\n      interval = setInterval(() => {\n        setNum((prevNum) => {\n          if (prevNum >= totalImages) {\n            clearInterval(interval)\n            return prevNum\n          }\n          return prevNum + 1\n        })\n      }, 10)\n    }\n    return () => clearInterval(interval)\n  }, [isStarted, totalImages])\n\n  const handleImageError = (e) => {\n    e.target.src = \"https://picsum.photos/id/1/500/400\"\n  }\n\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;div className=\"num-grid\">\n        &#x3C;h1>PreLoad {isPreloaded ? \"ON\" : \"OFF\"}&#x3C;/h1>\n        &#x3C;h1 className=\"num\">{num}&#x3C;/h1>\n      &#x3C;/div>\n      &#x3C;button\n        className=\"button\"\n        onClick={() => setIsStarted(true)}\n        disabled={!isPreloaded}\n      >\n        Start\n      &#x3C;/button>\n      &#x3C;div className=\"image-grid\">\n        {preloadedImages.slice(0, num).map((image, index) => (\n          &#x3C;div key={index} className=\"image-container\">\n            &#x3C;div className=\"image-number\">{index + 1}&#x3C;/div>\n            &#x3C;img\n              className=\"image\"\n              alt={index}\n              src={image.src}\n              onError={handleImageError}\n            />\n          &#x3C;/div>\n        ))}\n      &#x3C;/div>\n    &#x3C;/div>\n  )\n}\n\nexport default App\n</code></pre>\n<img alt='preloadcache' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240608/preloadcache.gif'>\n<p>컴포넌트가 마운트될 때 모든 이미지를 미리 로딩하여 preloadedImages 상태에 저장한다. isPreloaded 상태를 통해 모든 이미지가 로드되었는지 확인하고, 사용자가 버튼을 클릭하면 이미지를 순차적으로 표시한다.</p>\n<img alt='preloadon' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240608/preloadon.gif'>\n<p>이미지 렌더링이 끊기지 않고 부드럽게 잘 나온다.</p>\n<p>결과적으로 Pre Loading을 적용했을 때 확실히 이미지 로드 시 끊김 현상이 없음을 알 수 있다. 위와 같은 방법은 초기 로딩 과정이 어느 정도 필요하다. 따라서 이러한 방식을 어떻게 알맞게 사용하느냐에 따라 사용자 경험을 크게 향상시킬 수 있다.</p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://picsum.photos/\" target=\"_blank\" rel=\"noopener noreferrer\">Lorem Picsum</a></p>\n<p><a href=\"https://velog.io/@younyikim/JS-Image-Preload-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%AF%B8%EB%A6%AC-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">Image Preload (이미지 미리 불러오기)</a></p>\n<p><a href=\"https://pshdev1030.github.io/2022/02/10/React-Image-preload/\" target=\"_blank\" rel=\"noopener noreferrer\">React Image preload!</a></p>\n<p><a href=\"https://velog.io/@sunn/React-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%AF%B8%EB%A6%AC-%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0-Image-Preload-useLayoutEffect\" target=\"_blank\" rel=\"noopener noreferrer\">이미지 미리 로드하기 (Image Preload, useLayoutEffect)</a></p>","tableOfContents":"<ul>\n<li><a href=\"/React/240608/#image-pre-loading\">Image Pre Loading</a></li>\n<li><a href=\"/React/240608/#pre-loading-%EB%B0%A9%EB%B2%95-%EA%B3%A0%EB%A0%A4-%EC%82%AC%ED%95%AD\">Pre Loading 방법, 고려 사항</a></li>\n<li><a href=\"/React/240608/#react-%EC%98%88%EC%A0%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">React 예제 만들기</a></li>\n<li><a href=\"/React/240608/#pre-loading-%EC%A0%81%EC%9A%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\">Pre Loading 적용 테스트</a></li>\n<li><a href=\"/React/240608/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2024년 06월 08일","title":"React에서 이미지 Pre Loading 처리 테스트 해보기","tags":["React","Javascript","Image","Optimization"]}}},"pageContext":{"slug":"/React/240608/","previous":{"fields":{"slug":"/Certification/240504/"},"frontmatter":{"title":"정보처리기사 후기"}},"next":{"fields":{"slug":"/Algorithm/240624/"},"frontmatter":{"title":"NP-난해와 NP-완전의 혼용"}}}},"staticQueryHashes":["1081905842","3911196313"]}
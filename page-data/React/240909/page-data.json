{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/240909/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"데이터 시각화란 데이터를 그래프, 차트, 지도, 인포그래픽 등 시각적인 형태로 표현하여 복잡한 정보나 패턴을 쉽게 이해할 수 있도록 하는 방법이다. 대량의 데이터를 시각적으로 표현함으로써 숨겨진 경향, 상관관계, 이상치 등을 더 직관적으로 파악할 수 있게 하며, 이를 통해 의사 결정 과정에서 통찰력을 제공한다. 차트는 데이터를 시각적으로 표현하여 정보를 …","html":"<blockquote>\n<p>데이터 시각화란 데이터를 그래프, 차트, 지도, 인포그래픽 등 시각적인 형태로 표현하여 복잡한 정보나 패턴을 쉽게 이해할 수 있도록 하는 방법이다. 대량의 데이터를 시각적으로 표현함으로써 숨겨진 경향, 상관관계, 이상치 등을 더 직관적으로 파악할 수 있게 하며, 이를 통해 의사 결정 과정에서 통찰력을 제공한다. 차트는 데이터를 시각적으로 표현하여 정보를 효과적으로 전달하는 데 매우 유용하다. React와 같은 프레임워크에서 다양한 차트를 쉽게 구현할 수 있는 라이브러리 중 대표적으로 ApexCharts가 있다.</p>\n</blockquote>\n<h2>ApexCharts.js</h2>\n<img alt='apexchart1' src='https://raw.githubusercontent.com/yhuj79/Past-Weather/main/assets/readme-3.gif'>\n<br>\n<img alt='apexchart1' src='https://raw.githubusercontent.com/yhuj79/Past-Weather/main/assets/readme-4.gif'>\n<p><a href=\"https://past-weather.vercel.app\" target=\"_blank\" rel=\"noopener noreferrer\">ApexCharts를 적용하여 개발한 프로젝트 - 과거 기상 데이터 차트 분석 웹 서비스</a></p>\n<p><strong>ApexCharts</strong>는 다양한 유형의 차트를 지원하는 JavaScript 차트 라이브러리이다. 데이터 시각화라고 하면 대표적인 것으로 D3.js가 있지만 사실 난이도가 굉장히 높아 진압장벽이 느껴진다. 그에 비해 React에서 사용할 수 있는 차트 라이브러리 중에서 ApexCharts는 다양한 종류의 차트를 간편하게 설정할 수 있다.</p>\n<p>라이브러리를 둘러보다 보면 커스텀 측면에서 자유도가 낮은 경우도 있고 데이터를 직관적으로 풀기 어렵게 설계된 경우도 많다. 하지만 ApexCharts는 <strong>전체적인 코드 설정이 비교적 간편하고, 특히 옵션 설정에서 많은 기능을 지원하기 때문에 다양한 커스터마이징이 가능하다.</strong> 위에 나온 프로젝트는 ApexCharts를 통해 선택한 날씨 데이터를 시각화하여 볼 수 있게 제작되었다. 데이터 시각화에 메인으로 사용되었던 <strong>라인, 원형 차트</strong>를 비롯하여, 사용하고 싶었으나 사용 데이터에 부합하지 않아 폐기되었던 <strong>레이더 차트</strong>까지 간단한 예제를 통해 다루어 보았다.</p>\n<h2>React에서 ApexCharts 사용하기</h2>\n<p>React에서 ApexCharts를 사용하려면, 먼저 필요한 라이브러리를 설치해야 한다.</p>\n<pre><code class=\"language-bash\">$ npm install react-apexcharts\n</code></pre>\n<p>설치 후, 차트를 구현할 컴포넌트를 만들어 차트를 렌더링하면 된다. 다음은 ApexCharts의 라인 차트(Line Chart), 원형 차트(Pie Chart), 레이더 차트(Radar Chart) 예제이다.</p>\n<h3>라인 차트(Line Chart)</h3>\n<p><strong>라인 차트</strong>는 데이터를 선형으로 연결하여 데이터의 흐름을 파악하는 데 유용하다. 아래는 두 개의 데이터 시리즈를 보여주는 간단한 라인 차트이다.</p>\n<pre><code class=\"language-javascript\">import Chart from \"react-apexcharts\"\n\n// 차트에 표시될 데이터 설정\nconst chartData = [\n  {\n    name: \"data A\",\n    data: [\n      { x: 1, y: 0.6 },\n      { x: 2, y: 7.9 },\n      ...{ x: 9, y: 21.7 },\n      { x: 10, y: 16.5 },\n    ],\n  },\n  {\n    name: \"data B\",\n    data: [\n      { x: 1, y: 8.1 },\n      { x: 2, y: 6.3 },\n      ...{ x: 9, y: 25.7 },\n      { x: 10, y: 15.2 },\n    ],\n  },\n  {\n    name: \"data C\",\n    data: [\n      { x: 1, y: 4.8 },\n      { x: 2, y: 3.2 },\n      ...{ x: 9, y: 12.8 },\n      { x: 10, y: 7.6 },\n    ],\n  },\n  {\n    name: \"data D\",\n    data: [\n      { x: 1, y: 5.7 },\n      { x: 2, y: 9.9 },\n      ...{ x: 9, y: 22.9 },\n      { x: 10, y: 11.4 },\n    ],\n  },\n]\n\n// 차트 옵션 설정\nconst chartOptions = {\n  chart: {\n    type: \"line\", // 차트 유형을 라인 차트로 설정\n    toolbar: {\n      show: true, // 툴바 표시 여부\n      tools: {\n        zoom: true, // 확대 툴\n        zoomin: true, // 확대 버튼\n        zoomout: true, // 축소 버튼\n        download: true, // 이미지 다운로드 버튼\n        pan: true, // 팬 이동 가능 여부\n        reset: true, // 차트 초기화 버튼\n        selection: true, // 선택 도구 활성화 여부\n      },\n    },\n  },\n  title: {\n    text: \"Line Chart\", // 차트 타이틀 텍스트\n    align: \"center\", // 타이틀 위치\n    margin: 5, // 타이틀과 차트 간의 여백\n    offsetY: 0, // Y축 기준으로 타이틀 위치 조정\n    style: {\n      fontSize: \"25px\", // 타이틀 텍스트 크기\n      color: \"#000\", // 타이틀 텍스트 색상\n    },\n  },\n  dataLabels: {\n    enabled: false, // 데이터 라벨 표시 여부\n    offsetX: -3, // 라벨의 X축 위치를 조정\n    offsetY: 0, // 라벨의 Y축 위치를 조정\n  },\n  stroke: {\n    curve: \"smooth\", // 곡선형 라인 적용\n  },\n  xaxis: {\n    tickAmount: 10, // X축에 표시될 틱의 수\n    labels: {\n      show: true, // 라벨 표시 여부\n      rotate: 0, // 라벨 회전 각도\n    },\n  },\n  legend: {\n    show: true, // 범례 표시 여부\n    position: \"bottom\", // 범례 위치\n  },\n  tooltip: {\n    enabled: true, // 툴팁 활성화 여부\n    shared: true, // 여러 시리즈의 데이터 값을 동시에 툴팁에 표시\n  },\n  colors: [\n    // 데이터 컬러 리스트\n    \"#008FFB\", // ApexChart에서 기본값으로 사용하는 색상을 일단 적용해 놓았음\n    \"#00E396\",\n    \"#FEB019\",\n    \"#FF4560\",\n    \"#775DD0\",\n    \"#3F51B5\",\n    \"#4CAF50\",\n    \"#F9CE1D\",\n    \"#33B2DF\",\n    \"#D4526E\",\n  ],\n}\n\nexport default function LineChart() {\n  return (\n    &#x3C;Chart\n      type=\"line\" // 차트 유형 지정\n      options={chartOptions} // 차트 옵션 적용\n      series={chartData} // 차트 데이터 적용\n      width={\"100%\"} // 차트 너비 설정\n      height={400} // 차트 높이 설정\n    />\n  )\n}\n</code></pre>\n<img alt='line-1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/line-1.png'>\n<p>이 예제에서는 x, y 좌표로 이루어진 데이터를 시각화하며, X축은 1부터 10까지의 숫자를, Y축은 각 데이터 포인트의 값을 표시했다. 옵션 설정 부분의 경우 라이브러리를 사용하면서 찾아본 최대한 많은 옵션을 포함해 놓았지만, 위 차트 옵션 이외에도 많은 설정 옵션들이 존재한다.</p>\n<img alt='line-2' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/line-2.gif'>\n<p>ApexCharts 지원 툴 중 하나인 줌 기능이다. 구역을 확대해서 데이터를 확인할 수 있다. 불필요할 경우 옵션에서 설정을 끄면 된다.</p>\n<pre><code class=\"language-javascript\">  dataLabels: {\n    enabled: true, // 데이터 라벨 표시 ON\n    offsetX: -3,\n    offsetY: 0,\n  },\n</code></pre>\n<img alt='line-2' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/line-2.png'>\n<p>데이터 라벨을 표시하면 위와 같이 나타나게 된다. 데이터 라벨이 차트 공간 끝에 걸려 잘리는 경우가 있으니 offset을 조절하거나 div를 따로 설정하여 처리해야 한다.</p>\n<h3>원형 차트(Pie Chart)</h3>\n<p><strong>원형 차트</strong>는 비율을 나타내는 데 자주 사용된다. ApexCharts에서는 데이터를 섹터로 나누어 비율을 표시하고, 라벨과 중앙에 총합을 표시할 수 있다.</p>\n<pre><code class=\"language-javascript\">import Chart from \"react-apexcharts\"\n\n// 차트에 표시될 데이터 설정\nconst chartData = [20, 19, 22, 36, 35, 0, 18, 22, 0, 30]\n\n// 차트 옵션 설정\nconst chartOptions = {\n  chart: {\n    width: \"100%\",\n    height: \"100%\",\n    type: \"pie\",\n  },\n  labels: [\n    // 원형 차트의 라벨 표시\n    \"Alpha\",\n    \"Beta\",\n    \"Gamma\",\n    \"Delta\",\n    \"Epsilon\",\n    \"Zeta\",\n    \"Eta\",\n    \"Theta\",\n    \"Iota\",\n    \"Kappa\",\n  ],\n  title: {\n    text: \"Pie Chart\", // 차트 타이틀 텍스트\n    align: \"center\", // 타이틀의 정렬 (center로 설정)\n    margin: 5, // 타이틀과 차트 간 여백\n    offsetX: -35, // X축 기준으로 타이틀 위치 조정\n    style: {\n      fontSize: \"25px\", // 타이틀 텍스트 크기\n      color: \"#000\", // 타이틀 색상\n    },\n  },\n  grid: {\n    padding: {\n      top: 5, // 차트 상단 여백\n      bottom: 5, // 차트 하단 여백\n      left: 5, // 차트 왼쪽 여백\n      right: 5, // 차트 오른쪽 여백\n    },\n  },\n  tooltip: {\n    enabled: false, // 툴팁 비활성화\n  },\n  legend: {\n    show: true, // 범례 표시 여부\n    width: 60, // 범례 너비 설정\n    offsetY: 10, // 범례의 수직 위치 조정\n    itemMargin: {\n      horizontal: 2, // 범례 아이템 간의 가로 여백\n      vertical: 2, // 범례 아이템 간의 세로 여백\n    },\n  },\n  colors: [\n    \"#FF5722\", // 각 데이터의 색상 설정\n    \"#FF9800\",\n    \"#FFC107\",\n    \"#4CAF50\",\n    \"#8BC34A\",\n    \"#80DEEA\",\n    \"#33CCFF\",\n    \"#0099FF\",\n    \"#0066CC\",\n    \"#004080\",\n  ],\n}\n\nexport default function PieChart() {\n  return (\n    &#x3C;Chart\n      type=\"pie\"\n      options={chartOptions}\n      series={chartData}\n      width={500}\n      height={300}\n    />\n  )\n}\n</code></pre>\n<img alt='pie-1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/pie-1.png'>\n<p>위와 같이 각 데이터 항목의 비율을 나타내는 차트를 그릴 수 있다. 마찬가지로 옵션을 통해 원형 차트의 다양한 부분을 커스터마이징할 수 있다.</p>\n<pre><code class=\"language-javascript\">const chartOptions = {\n  chart: {\n    width: \"100%\",\n    height: \"100%\",\n    type: \"donut\", // 타입 도넛으로 변경\n  },\n  labels: [\n    ...\n  ],\n  title: {\n    ...\n  },\n  plotOptions: {\n    pie: {\n      donut: {\n        size: \"55%\", // 도넛 차트의 크기\n        labels: {\n          show: true, // 도넛 중앙에 라벨 표시\n          total: {\n            show: true, // 도넛 중앙에 총합 표시\n            label: \"All\", // 총합에 대한 라벨 텍스트\n            fontFamily: \"Noto Sans KR, sans-serif\", // 폰트 패밀리 설정\n            fontWeight: \"600\", // 폰트 두께 설정\n            fontSize: \"20px\", // 폰트 크기 설정\n            formatter(w) {\n              // 총합을 계산하여 표시하는 함수\n              return (\n                w.globals.seriesTotals.reduce((a, b) => a + b, 0) + \" data\"\n              );\n            },\n          },\n          value: {\n            fontFamily: \"Noto Sans KR, sans-serif\", // 데이터 값에 대한 폰트 설정\n            fontWeight: \"600\",\n            fontSize: \"20px\",\n            formatter(val) {\n              // 각 데이터 값을 표시하는 함수\n              return val + \" data\";\n            },\n          },\n        },\n      },\n      dataLabels: {\n        offset: 0, // 데이터 라벨의 위치 조정\n      },\n    },\n  },\n  grid: {\n    ...\n  },\n  ...\n};\n\n...\n    &#x3C;Chart\n      type=\"donut\"\n      options={chartOptions}\n      series={chartData}\n      width={500}\n      height={300}\n    />\n...\n</code></pre>\n<img alt='donut-1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/donut-1.gif'>\n<p>타입을 donut으로 변경하고 이에 맞는 옵션을 추가하면 중앙이 뚫려 있고 총합을 표시하도록 설정된 <strong>도넛 차트</strong>로 변형시킬 수 있다.</p>\n<h3>레이더 차트(Radar Chart)</h3>\n<p>레이더 차트는 다각형의 축을 따라 여러 데이터를 표현하는 차트로, 여러 카테고리 간의 비교를 시각적으로 보여준다.</p>\n<pre><code class=\"language-javascript\">import Chart from \"react-apexcharts\"\n\n// 차트에 표시될 데이터 설정\nconst chartData = [\n  {\n    name: \"Series 1\", // 첫 번째 시리즈 이름\n    data: [80, 50, 30, 40, 100, 20], // 각 축에 해당하는 값\n  },\n  {\n    name: \"Series 2\", // 두 번째 시리즈 이름\n    data: [20, 30, 40, 80, 20, 80],\n  },\n  {\n    name: \"Series 3\", // 세 번째 시리즈 이름\n    data: [44, 76, 78, 13, 43, 10],\n  },\n]\n\n// 차트 옵션 설정\nconst chartOptions = {\n  chart: {\n    type: \"radar\", // 레이더 차트로 설정\n    toolbar: {\n      show: true, // 차트 상단 툴바 표시\n    },\n  },\n  title: {\n    text: \"Radar Chart\", // 차트 타이틀 텍스트\n    align: \"center\", // 타이틀 위치 조정\n    offsetX: -10, // X축 기준으로 타이틀 위치 조정\n    style: {\n      fontSize: \"25px\", // 타이틀 폰트 크기\n      color: \"#000\", // 타이틀 색상\n    },\n  },\n  xaxis: {\n    // 레이더 차트의 각 축에 해당하는 라벨\n    categories: [\n      \"Category A\",\n      \"Category B\",\n      \"Category C\",\n      \"Category D\",\n      \"Category E\",\n      \"Category F\",\n    ],\n  },\n  plotOptions: {\n    radar: {\n      size: 100, // 레이더 차트의 크기\n      polygons: {\n        strokeColors: \"#e9e9e9\", // 레이더 차트 다각형의 색상\n        fill: {\n          colors: [\"#f8f8f8\", \"#fff\"], // 다각형 안의 채우기 색상\n        },\n      },\n    },\n  },\n  stroke: {\n    width: 2, // 라인의 두께 설정\n  },\n  markers: {\n    size: 4, // 데이터 포인트의 크기\n  },\n  fill: {\n    opacity: 0.2, // 채우기 색상의 불투명도 설정\n  },\n  tooltip: {\n    enabled: true, // 툴팁 활성화\n  },\n  legend: {\n    show: true, // 범례 표시\n    position: \"bottom\", // 범례 위치\n    horizontalAlign: \"center\", // 범례의 정렬\n  },\n  colors: [\"#FF4560\", \"#00E396\", \"#008FFB\"], // 각 데이터의 색상 설정\n}\n\nexport default function RadarChart() {\n  return (\n    &#x3C;Chart\n      type=\"radar\"\n      options={chartOptions}\n      series={chartData}\n      width={500}\n      height={350}\n    />\n  )\n}\n</code></pre>\n<img alt='radar-1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/radar-1.png'>\n<p>이 예제에서는 각 시리즈가 여러 카테고리에 대한 값들을 다각형의 축을 따라 나타낸다. 레이더 차트는 분포도나 성능 비교를 시각화하는 데 유용하다.</p>\n<h2>사용하며 맞이했던 문제</h2>\n<h3>화면 크기 변화 시 width 문제</h3>\n<p>Chart 컴포넌트에 width를 적용할 때 \"100%\", \"100vw\" 등의 옵션이 적용되지 않는 케이스가 발견되었다. 부모 요소의 적용 여부와 관계없이 고정적인 width 값을 입력해야 적용이 되었다. 이는 반응형 디자인을 고려할 때 문제가 발생한다.</p>\n<img alt='width-problem' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/width-problem.gif'>\n<p>따라서 화면 크기 변화를 수동적으로 감지하여 차트의 가로 길이를 업데이트 하는 방식을 적용해 보았다.</p>\n<pre><code class=\"language-javascript\">  // 라이브러리 문제 때문에 가로 길이 수동적으로 설정\n  const paperRef = useRef(null);\n  const [chartWidth, setChartWidth] = useState(\"\");\n  // 컴포넌트가 렌더링될 때와 화면 크기 변화가 감지될 때 차트의 가로 길이를 업데이트\n  useEffect(() => {\n    const updateChartWidth = () => {\n      if (paperRef.current) {\n        setChartWidth(paperRef.current.offsetWidth - 15);\n      }\n    };\n    const observer = new ResizeObserver(() => {\n      updateChartWidth();\n    });\n    const paperElement = paperRef.current;\n    if (paperElement) {\n      // 요소의 크기 변화를 감시\n      observer.observe(paperElement);\n    }\n    updateChartWidth();\n    return () => {\n      if (paperElement) {\n        // 컴포넌트가 언마운트될 때 감시 해제\n        observer.unobserve(paperElement);\n      }\n    };\n  }, []);\n\n  ...\n\n    return (\n    &#x3C;div ref={paperRef}>\n        ...\n        &#x3C;Chart\n          type=\"line\"\n          options={chartOptions}\n          series={chartData}\n          width={chartWidth}\n          height={300}\n        />\n        ...\n    &#x3C;/div>\n  );\n</code></pre>\n<p>적용하려는 프로젝트의 구조나 사용 환경에 따라 다를 수 있고, 또 다른 해결 방법이 존재할 수 있다. 이 방식은 위에서 소개된 프로젝트의 방식과 유사한 구조를 생각중이라면 나쁘지 않은 해결 방법이 될 수 있다.</p>\n<h3>toString Error</h3>\n<img alt='error' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/240909/error.png'>\n<p>이 문제는 Javascript React 환경에서 테스트를 하던 중 발견되었다. 차트를 생성하고 난 후 웹페이지에서 클릭을 해보면 불규칙적으로 에러가 발생한다. 비교적 간단한 차트를 구성할 경우에는 발생하지 않은 경우도 있다.</p>\n<p>원인은 아직까지 파악되지 않았다. Typescript 환경에서 개발을 할 때는 발생하지 않는 문제이기 때문에, 만약 프로젝트에 큰 데이터와 복잡한 옵션이 필요한 차트를 사용할 것이라면 Typescript를 사용하는 것을 권장한다. <strong>(추후 원인 파악 시 글 수정 예정)</strong></p>\n<pre><code class=\"language-typescript\">// 옵션 타입 선언 (위에서 설치했던 것은 react-apexcharts로, apexcharts도 설치 필요)\nimport { ApexOptions } from \"apexcharts\";\n\nconst chartOptions: ApexOptions = {\n  ...\n</code></pre>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://apexcharts.com\" target=\"_blank\" rel=\"noopener noreferrer\">ApexCharts.js</a></p>","tableOfContents":"<ul>\n<li><a href=\"/React/240909/#apexchartsjs\">ApexCharts.js</a></li>\n<li>\n<p><a href=\"/React/240909/#react%EC%97%90%EC%84%9C-apexcharts-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">React에서 ApexCharts 사용하기</a></p>\n<ul>\n<li><a href=\"/React/240909/#%EB%9D%BC%EC%9D%B8-%EC%B0%A8%ED%8A%B8line-chart\">라인 차트(Line Chart)</a></li>\n<li><a href=\"/React/240909/#%EC%9B%90%ED%98%95-%EC%B0%A8%ED%8A%B8pie-chart\">원형 차트(Pie Chart)</a></li>\n<li><a href=\"/React/240909/#%EB%A0%88%EC%9D%B4%EB%8D%94-%EC%B0%A8%ED%8A%B8radar-chart\">레이더 차트(Radar Chart)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/React/240909/#%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B0-%EB%A7%9E%EC%9D%B4%ED%96%88%EB%8D%98-%EB%AC%B8%EC%A0%9C\">사용하며 맞이했던 문제</a></p>\n<ul>\n<li><a href=\"/React/240909/#%ED%99%94%EB%A9%B4-%ED%81%AC%EA%B8%B0-%EB%B3%80%ED%99%94-%EC%8B%9C-width-%EB%AC%B8%EC%A0%9C\">화면 크기 변화 시 width 문제</a></li>\n<li><a href=\"/React/240909/#tostring-error\">toString Error</a></li>\n</ul>\n</li>\n<li><a href=\"/React/240909/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2024년 09월 09일","title":"React에서 ApexCharts로 차트 그리기","tags":["React","Javascript","Data Visualization","Chart"]}}},"pageContext":{"slug":"/React/240909/","previous":{"fields":{"slug":"/Typescript/240827/"},"frontmatter":{"title":"Typescript로 작성하는 디자인 패턴"}},"next":{"fields":{"slug":"/Gatsby/240926/"},"frontmatter":{"title":"Gatsby Blog 2년 사용 후기"}}}},"staticQueryHashes":["1081905842","3911196313"]}
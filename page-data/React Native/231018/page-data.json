{"componentChunkName":"component---src-templates-blog-post-js","path":"/React Native/231018/","result":{"data":{"site":{"siteMetadata":{"author":"yhuj79","comment":{"utterances":"yhuj79/blog-comments"},"sponsor":{"buyMeACoffeeId":"yhuj79"}}},"markdownRemark":{"excerpt":"요즘 앱을 사용하다 보면 위치 권한을 물어보는 경우가 상당히 많다. 사용자 위치 변화에 따라 특정 정보를 제공하거나 위치 정보 자체를 사용하는 무선 콘텐츠 서비스들이 굉장히 다양하다. React Native에서도 사용자의 위치 좌표를 출력받을 수 있는 라이브러리를 간단히 사용해 볼 수 있었는데, 바로 Geolocation Service이다. 프로젝트 환경…","html":"<blockquote>\n<p>요즘 앱을 사용하다 보면 위치 권한을 물어보는 경우가 상당히 많다. 사용자 위치 변화에 따라 특정 정보를 제공하거나 위치 정보 자체를 사용하는 무선 콘텐츠 서비스들이 굉장히 다양하다. React Native에서도 사용자의 위치 좌표를 출력받을 수 있는 라이브러리를 간단히 사용해 볼 수 있었는데, 바로 <strong>Geolocation Service</strong>이다.</p>\n</blockquote>\n<h2>프로젝트 환경 설정</h2>\n<p><code>React Native CLI</code>를 사용, 버전은 <code>0.68.2</code>로 설정했다.</p>\n<pre><code class=\"language-bash\"># 앱 설치\n$ react-native init --version 0.68.2 프로젝트명\n</code></pre>\n<p>안드로이드 에뮬레이터를 통해 진행했다. 디바이스는 기존에 갤럭시 S21로 세팅되어 있으며, 다음 명령어로 프로젝트를 실행했다.</p>\n<pre><code class=\"language-bash\">$ react-native run-android\n</code></pre>\n<img alt='geo1' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/231018/geo1.png'>\n<p>에뮬레이터가 실행되면 위처럼 설정되어 있던 기본 화면이 나온다.</p>\n<pre><code class=\"language-javascript\">/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow strict-local\n */\n\nimport React from \"react\"\nimport type { Node } from \"react\"\nimport {\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  useColorScheme,\n  View,\n} from \"react-native\"\n\nimport {\n  Colors,\n  DebugInstructions,\n  Header,\n  LearnMoreLinks,\n  ReloadInstructions,\n} from \"react-native/Libraries/NewAppScreen\"\n\nconst Section = ({ children, title }): Node => {\n  const isDarkMode = useColorScheme() === \"dark\"\n  return (\n    &#x3C;View style={styles.sectionContainer}>\n      &#x3C;Text\n        style={[\n          styles.sectionTitle,\n          {\n            color: isDarkMode ? Colors.white : Colors.black,\n          },\n        ]}\n      >\n        {title}\n      &#x3C;/Text>\n      &#x3C;Text\n        style={[\n          styles.sectionDescription,\n          {\n            color: isDarkMode ? Colors.light : Colors.dark,\n          },\n        ]}\n      >\n        {children}\n      &#x3C;/Text>\n    &#x3C;/View>\n  )\n}\n\nconst App: () => Node = () => {\n  const isDarkMode = useColorScheme() === \"dark\"\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,\n  }\n\n  return (\n    &#x3C;SafeAreaView style={backgroundStyle}>\n      &#x3C;StatusBar barStyle={isDarkMode ? \"light-content\" : \"dark-content\"} />\n      &#x3C;ScrollView\n        contentInsetAdjustmentBehavior=\"automatic\"\n        style={backgroundStyle}\n      >\n        &#x3C;Header />\n        &#x3C;View\n          style={{\n            backgroundColor: isDarkMode ? Colors.black : Colors.white,\n          }}\n        >\n          &#x3C;Section title=\"Step One\">\n            Edit &#x3C;Text style={styles.highlight}>App.js&#x3C;/Text> to change this\n            screen and then come back to see your edits.\n          &#x3C;/Section>\n          &#x3C;Section title=\"See Your Changes\">\n            &#x3C;ReloadInstructions />\n          &#x3C;/Section>\n          &#x3C;Section title=\"Debug\">\n            &#x3C;DebugInstructions />\n          &#x3C;/Section>\n          &#x3C;Section title=\"Learn More\">\n            Read the docs to discover what to do next:\n          &#x3C;/Section>\n          &#x3C;LearnMoreLinks />\n        &#x3C;/View>\n      &#x3C;/ScrollView>\n    &#x3C;/SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  sectionContainer: {\n    marginTop: 32,\n    paddingHorizontal: 24,\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: \"600\",\n  },\n  sectionDescription: {\n    marginTop: 8,\n    fontSize: 18,\n    fontWeight: \"400\",\n  },\n  highlight: {\n    fontWeight: \"700\",\n  },\n})\n\nexport default App\n</code></pre>\n<p>기본적으로 생성된 App.js 파일이다. 코드를 다음과 같이 정리해 주었다.</p>\n<pre><code class=\"language-javascript\">import React from \"react\"\nimport { View, Text, StyleSheet } from \"react-native\"\n\nconst App = () => {\n  return (\n    &#x3C;View>\n      &#x3C;Text style={styles.title}>Geolocation Tutorial&#x3C;/Text>\n    &#x3C;/View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  title: {\n    textAlign: \"center\",\n    fontSize: 25,\n    margin: 15,\n    color: \"black\",\n    fontWeight: \"600\",\n  },\n})\n\nexport default App\n</code></pre>\n<img alt='geo2' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/231018/geo2.png' width='300'>\n<h2>Geolocation Service</h2>\n<p>모바일 디바이스의 현재 위치 좌표 값을 얻기 위해서는 <code>Geolocation Service</code>라는 라이브러리를 사용한다.</p>\n<pre><code class=\"language-bash\">$ yarn add react-native-geolocation-service\n</code></pre>\n<p>이 기능은 위치 정보를 얻는 민감한 기능에 해당하므로 사용자의 동의를 받는 절차를 생성해야 한다. 안드로이드에서 제공하는 권한 부여 방식은 <code>android/app/src/main/AndroidManifest.xml</code> 에서 다음 코드를 추가하면 된다.</p>\n<pre><code class=\"language-xml\">&#x3C;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n&#x3C;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n</code></pre>\n<p>이제 Geolocation Service를 통해 얻은 좌표를 앱에 출력해보자. 먼저 권한 요청을 처리해주는 코드를 작성했다.</p>\n<pre><code class=\"language-javascript\">useEffect(() => {\n  if (Platform.OS === \"android\") {\n    PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION\n    )\n  }\n}, [])\n</code></pre>\n<p>통상적으로 iOS와 안드로이드를 조건문을 통해 권한 처리를 하게 되는데, 현재 프로젝트는 안드로이드 권한 요청 처리만 해 두기로 하였다.</p>\n<pre><code class=\"language-javascript\">const [currentLocation, setCurrentLocation] = useState(null)\n\nuseEffect(() => {\n  // 위치 업데이트 설정\n  const watchId = Geolocation.watchPosition(\n    (position) => {\n      const { latitude, longitude } = position.coords\n      // currentLocation에 위도, 경도 저장\n      setCurrentLocation({ latitude, longitude })\n    },\n    (error) => {\n      console.log(error)\n    },\n    {\n      enableHighAccuracy: true, // 배터리를 더 소모하여 보다 정확한 위치 추적\n      timeout: 20000,\n      maximumAge: 0, // 한 번 찾은 위치 정보를 해당 초만큼 캐싱\n      distanceFilter: 1,\n    }\n  )\n\n  // 컴포넌트 언마운트 시 위치 업데이트 중지\n  return () => {\n    Geolocation.clearWatch(watchId)\n  }\n}, [])\n</code></pre>\n<p>위치 좌표를 얻는 코드이다. <code>위도(latitude)</code>와 <code>경도(longitude)</code> 값을 받아 <code>currentLocation</code> 변수에 저장하였다. 이를 통해 좌표를 확인해 볼 수 있다.</p>\n<p>전체 코드와 출력 결과를 확인해 보면...</p>\n<pre><code class=\"language-javascript\">import React, { useEffect, useState } from \"react\"\nimport { View, Text, StyleSheet, PermissionsAndroid } from \"react-native\"\nimport Geolocation from \"react-native-geolocation-service\"\n\nconst App = () => {\n  const [currentLocation, setCurrentLocation] = useState(null)\n\n  useEffect(() => {\n    if (Platform.OS === \"android\") {\n      PermissionsAndroid.request(\n        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION\n      )\n    }\n  }, [])\n\n  useEffect(() => {\n    const watchId = Geolocation.watchPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords\n        setCurrentLocation({ latitude, longitude })\n      },\n      (error) => {\n        console.log(error)\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 20000,\n        maximumAge: 0,\n        distanceFilter: 1,\n      }\n    )\n\n    return () => {\n      Geolocation.clearWatch(watchId)\n    }\n  }, [])\n\n  return (\n    &#x3C;View>\n      &#x3C;Text style={styles.title}>Geolocation Tutorial&#x3C;/Text>\n      {currentLocation ? (\n        &#x3C;Text style={styles.title}>\n          {currentLocation.latitude} / {currentLocation.longitude}\n        &#x3C;/Text>\n      ) : (\n        &#x3C;Text style={styles.title}>location undefined&#x3C;/Text>\n      )}\n    &#x3C;/View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  title: {\n    textAlign: \"center\",\n    fontSize: 25,\n    margin: 15,\n    color: \"black\",\n    fontWeight: \"600\",\n  },\n})\n\nexport default App\n</code></pre>\n<table>\n    <tr>\n        <td>\n            <img alt='geo3' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/231018/geo3.png'>\n        </td>\n        <td>\n            <img alt='geo4' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/231018/geo4.png'>\n        </td>\n    </tr>\n</table>\n<p>이렇게 위치 정보의 접근하는 메시지가 뜨고, 동의하면 좌표 값이 정상적으로 출력된다.</p>\n<p>그런데 실제 모바일 디바이스에서 실행한 것도 아니고 에뮬레이터에 표시된 <code>37.4219983, -122.084</code> 라는 좌표는 뭘까? 이 좌표를 한번 구글 맵에 검색해 보았다.</p>\n<img alt='geo5' src='https://raw.githubusercontent.com/yhuj79/blog-assets/main/231018/geo5.png'>\n<p>이렇듯 PC 개발 환경에서 위치 정보를 받아 오면 default로 구글 본사의 위치가 표시되는 것을 볼 수 있다.</p>\n<p>APK를 생성하여 모바일 디바이스에서 앱을 실행해 보면 현재 자신이 위치에 있는 좌표 값이 나오는 것을 확인해 볼 수 있을 것이다. APK 생성 방법은 아래 포스트를 참고하였다.</p>\n<p><a href=\"https://ssilook.tistory.com/entry/React-Native-RN-Android-Studio%EB%A1%9C-APK-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">RN - APK 추출하기 1편(Android Studio로 APK 추출하기)</a></p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://www.npmjs.com/package/react-native-geolocation-service\" target=\"_blank\" rel=\"noopener noreferrer\">react-native-geolocation-service - npm</a></p>\n<p><a href=\"https://velog.io/@flowersayo/React-NativeExpo%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-GPS-%EC%9C%84%EC%B9%98%EC%B6%94%EC%A0%81-%EB%9F%AC%EB%8B%9D-%ED%8A%B8%EB%9E%98%ED%82%B9-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">React Native(Expo)를 이용한 GPS 위치추적 - 러닝 트래킹 앱 만들기</a></p>\n<p><a href=\"https://www.scaler.com/topics/react-native-geolocation-service/\" target=\"_blank\" rel=\"noopener noreferrer\">React Native Geolocation Service</a></p>\n<p><a href=\"https://agilog.tistory.com/2\" target=\"_blank\" rel=\"noopener noreferrer\">리액트 네이티브 현재 위치 정보 가져오기, Getting current location with a react native geolocation service</a></p>\n<p><a href=\"https://velog.io/@eunddodi/ReactNative%EB%A1%9C-%EB%9F%AC%EB%8B%9D-%EC%96%B4%ED%94%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0-Geolocation%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%9F%AC%EB%8B%9D-%ED%8A%B8%EB%9E%98%ED%82%B9%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">ReactNative로 러닝 어플 만들기 - Geolocation으로 사용자 러닝 트래킹하기</a></p>\n<p><a href=\"https://ssilook.tistory.com/entry/React-Native-RN-Android-Studio%EB%A1%9C-APK-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">RN - APK 추출하기 1편(Android Studio로 APK 추출하기)</a></p>","tableOfContents":"<ul>\n<li><a href=\"/React%20Native/231018/#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95\">프로젝트 환경 설정</a></li>\n<li><a href=\"/React%20Native/231018/#geolocation-service\">Geolocation Service</a></li>\n<li><a href=\"/React%20Native/231018/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2023년 10월 18일","title":"React Native 내 위치 정보 얻기 (Geolocation Service)","tags":["React Native","Location"]}}},"pageContext":{"slug":"/React Native/231018/","previous":{"fields":{"slug":"/Java/230925/"},"frontmatter":{"title":"Java Basic"}},"next":{"fields":{"slug":"/Algorithm/240117/"},"frontmatter":{"title":"최적의 여행 경로를 찾기 위한 최근접 이웃 알고리즘 솔루션"}}}},"staticQueryHashes":["1081905842","3911196313"]}